<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: distributed | Rishijeet Mishra | Technologist | Tech Trends & Development Blog]]></title>
    <link href="https://rishijeet.github.io/blog/categories/distributed/atom.xml" rel="self"/>
    <link href="https://rishijeet.github.io/"/>
    <updated>2025-10-19T10:37:19+05:30</updated>
    <id>https://rishijeet.github.io/</id>
    <author>
        <name><![CDATA[Rishijeet Mishra]]></name>
        <email><![CDATA[rishijeet@gmail.com]]></email>
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Distributed Computing - Quorum]]></title>
        <link href="https://rishijeet.github.io/blog/distributed-computing/"/>
        <updated>2016-09-04T18:40:02+05:30</updated>
        <id>https://rishijeet.github.io/blog/distributed-computing</id>
        <content type="html"><![CDATA[<p>In a distributed database system, a transaction could be executing its operations at multiple sites. Since atomicity requires every distributed transaction to be atomic, the transaction must have the same fate (commit or abort) at every site. In case of network partitioning, sites are partitioned and the partitions may not be able to communicate with each other. This is where a quorum-based technique comes in. The fundamental idea is that a transaction is executed if the majority of sites vote to execute it.</p>

<a name="Quorum-Consensus-Protocol"></a>
<h4>Quorum Consensus Protocol</h4>

<p>This is one of the distributed lock manager based concurrency control protocol in distributed database systems. It works as follows;</p>

<ul>
<li>The protocol assigns each site that have a replica with a weight.</li>
<li>For any data item, the protocol assigns a read quorum Qr and write quorum Qw. Here, Qr and Qw are two integers (sum of weights of some sites). And, these two integers are chosen according to the following conditions put together;</li>
</ul>


<p><code>Qr + Qw &gt; S - rule which avoids read-write conflict. (i.e, two transactions cannot read and write concurrently)</code></p>

<p><code>2 * Qw &gt; S - rule which avoids write-write conflict. (i.e, two transactions cannot write concurrently)</code></p>

<p>Here, S is the total weight of all sites in which the data item replicated.</p>

<!-- more -->


<a name="How-do-we-perform-read-and-write-on-replicas-3f-"></a>
<h4>How do we perform read and write on replicas?</h4>

<ul>
<li>A transaction that needs a data item for reading purpose has to lock enough sites. ie, it has lock sites with the sum of their weight >= Qr. Read quorum must always intersect with write quorum.</li>
<li>A transaction that needs a data item for writing purpose has to lock enough sites. ie, it has lock sites with the sum of their weight >= Qw.</li>
</ul>


<a name="How-does-it-work-3f-"></a>
<h4>How does it work?</h4>

<p>Let us assume a fully replicated distributed database with four sites S1, S2, S3, and S4.</p>

<ol>
<li><p>According to the protocol, we need to assign a weight to every site. (This weight can be chosen on many factors like the availability of the site, latency etc.). For simplicity, let us assume the weight as 1 for all sites.</p></li>
<li><p>Let us choose the values for Qr and Qw as 2 and 3. Our total weight S is 4. And according to the conditions, our Qr and Qw values are correct;
<br>
<code>Qr + Qw &gt; S =&gt; 2 + 3 &gt; 4               True</code>
<br>
<code>2 * Qw  &gt; S =&gt; 2 * 3 &gt; 4               True</code>
<br></p></li>
<li>Now, a transaction which needs a read lock on a data item has to lock 2 sites. A transaction which needs a write lock on data item has to lock 3 sites.</li>
</ol>


<a name="Case-1-3c-code-3e--26-sup1-3b--3c--2f-code-3e-"></a>
<h6>Case 1<code>&sup1;</code></h6>

<p>Read Quorum Qr = 2, Write Quorum Qw = 3, Site’s weight = 1, Total weight of sites S = 4</p>

<ul>
<li>Read Lock

<ol>
<li>Read request has to lock at least two replicas (2 sites in our example)</li>
<li>Any two sites can be locked</li>
</ol>
</li>
<li>Write Lock

<ol>
<li>Write request has to lock at least three replicas (3 sites in our example)</li>
</ol>
</li>
</ul>


<a name="Case-2"></a>
<h6>Case 2</h6>

<p>Read Quorum Qr = 1, Write Quorum Qw = 4, Site’s weight = 1, Total weight of sites S = 4</p>

<ul>
<li>Read Lock

<ol>
<li>Read lock requires one site</li>
</ol>
</li>
<li>Write Lock

<ol>
<li>Write lock requires 4 sites</li>
</ol>
</li>
</ul>


<p><em><code>&sup1;</code>Points and example taken from web.</em></p>
]]></content>
    </entry>
    
</feed>
