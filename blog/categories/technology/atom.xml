<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: technology | Rishijeet Mishra]]></title>
    <link href="https://rishijeet.github.io/blog/categories/technology/atom.xml" rel="self"/>
    <link href="https://rishijeet.github.io/"/>
    <updated>2025-03-09T11:40:34+05:30</updated>
    <id>https://rishijeet.github.io/</id>
    <author>
        <name><![CDATA[Rishijeet Mishra]]></name>
        <email><![CDATA[rishijeet@gmail.com]]></email>
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Unleashing the Power of AI Transformer: Revolutionizing Artificial Intelligence]]></title>
        <link href="https://rishijeet.github.io/blog/unleashing-the-power-of-ai-transformer-revolutionizing-artificial-intelligence/"/>
        <updated>2023-05-22T18:57:12+05:30</updated>
        <id>https://rishijeet.github.io/blog/unleashing-the-power-of-ai-transformer-revolutionizing-artificial-intelligence</id>
        <content type="html"><![CDATA[<p>In recent years, the field of artificial intelligence (AI) has witnessed a groundbreaking advancement with the introduction of the AI Transformer model. Inspired by the Transformer architecture, which gained fame for its effectiveness in natural language processing tasks, the AI Transformer has emerged as a powerful tool that revolutionizes various domains, including language translation, image recognition, and speech synthesis. In this blog, we will explore the capabilities and impact of the AI Transformer model, shedding light on its remarkable contributions to the world of AI.</p>

<a name="Understanding-the-Transformer-Architecture"></a>
<h5>Understanding the Transformer Architecture</h5>

<p>The Transformer architecture, initially introduced for machine translation tasks, reshaped the landscape of AI. Unlike traditional recurrent neural networks (RNNs) or convolutional neural networks (CNNs), the Transformer model leverages a self-attention mechanism, enabling it to capture global dependencies in the input data efficiently. This architecture eliminates the need for sequential processing and allows for parallelization, resulting in faster and more accurate predictions.</p>

<a name="Language-Translation-Advancements"></a>
<h5>Language Translation Advancements</h5>

<p>One of the key applications of the AI Transformer is language translation. With its ability to handle long-range dependencies and capture contextual information effectively, the AI Transformer has significantly improved the quality of machine translation systems. The model&rsquo;s attention mechanism enables it to attend to relevant parts of the input text, producing more accurate and coherent translations across different languages. This breakthrough has bridged communication gaps and fostered cross-cultural understanding on a global scale.</p>

<a name="Image-Recognition-and-Computer-Vision"></a>
<h5>Image Recognition and Computer Vision</h5>

<p>The impact of the AI Transformer extends beyond natural language processing. In the realm of computer vision, the model has demonstrated remarkable performance in image recognition tasks. By leveraging the self-attention mechanism, the AI Transformer can analyze and interpret complex visual data, leading to more accurate object detection, image segmentation, and scene understanding. This has paved the way for advancements in autonomous vehicles, robotics, medical imaging, and various other industries reliant on computer vision technologies.</p>

<!-- more -->


<a name="Speech-Synthesis-and-Natural-Language-Generation"></a>
<h5>Speech Synthesis and Natural Language Generation</h5>

<p>Another domain where the AI Transformer has left an indelible mark is speech synthesis and natural language generation. By leveraging its ability to learn dependencies and patterns in sequential data, the AI Transformer can generate human-like speech and produce coherent and contextually relevant text. This has found applications in voice assistants, audiobooks, accessibility technologies, and more, enhancing the overall user experience and accessibility of information.</p>

<a name="Challenges-and-Future-Directions"></a>
<h5>Challenges and Future Directions</h5>

<p>While the AI Transformer has achieved remarkable success, there are still challenges to overcome. The model&rsquo;s immense computational requirements and memory constraints can pose difficulties for real-time and resource-limited applications. Researchers are continuously exploring techniques to optimize and compress the AI Transformer, enabling its deployment on edge devices and enhancing its efficiency.</p>

<p>The future of the AI Transformer holds tremendous promise. As advancements continue, we can expect the model to tackle more complex tasks, push the boundaries of AI capabilities, and facilitate breakthroughs in areas such as drug discovery, personalized medicine, recommendation systems, and intelligent virtual assistants.</p>

<a name="Conclusion"></a>
<h5>Conclusion</h5>

<p>The AI Transformer has emerged as a game-changer in the field of artificial intelligence. Its ability to capture long-range dependencies and understand context has revolutionized language translation, image recognition, speech synthesis, and natural language generation. As we delve deeper into the potential of the AI Transformer, we can anticipate transformative advancements across various domains, propelling us toward a future where AI seamlessly integrates into our daily lives.</p>

<p>Through continued research and development, the AI Transformer will undoubtedly contribute to the evolution of AI, driving innovation and enhancing the way we interact with technology. Brace yourself for a future where the power of the AI Transformer shapes the world as we know it.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Web 3.0 - How does it impacts IOT ?]]></title>
        <link href="https://rishijeet.github.io/blog/web-3-dot-0-how-does-it-impacts-iot/"/>
        <updated>2023-05-22T13:13:54+05:30</updated>
        <id>https://rishijeet.github.io/blog/web-3-dot-0-how-does-it-impacts-iot</id>
        <content type="html"><![CDATA[<p>Web 3.0 has a significant impact on the Internet of Things (IoT) by enhancing its capabilities, security, and interoperability. Here are some key ways in which Web 3.0 transforms the IoT landscape:</p>

<ul>
<li><p>Decentralized Data Management: Web 3.0 leverages blockchain technology to create decentralized data marketplaces and storage solutions. This allows IoT devices to securely and autonomously store and exchange data without relying on centralized servers or intermediaries. Decentralization increases data privacy and reduces the risk of data breaches.</p></li>
<li><p>Enhanced Security and Privacy: With Web 3.0, IoT devices can leverage blockchain&rsquo;s cryptographic techniques to establish secure communication channels and ensure data integrity. By eliminating single points of failure and relying on consensus mechanisms, Web 3.0 provides a more robust security framework for IoT devices, mitigating risks associated with hacking, tampering, and unauthorized access.</p></li>
<li><p>Interoperability and Standardization: Web 3.0 fosters interoperability among diverse IoT devices and platforms. By utilizing decentralized protocols and standards, Web 3.0 enables seamless communication and data exchange between different IoT devices and ecosystems. This interoperability unlocks new possibilities for cross-domain collaborations, creating a more connected and efficient IoT ecosystem.</p></li>
</ul>


<!-- more -->


<ul>
<li><p>Autonomous Device-to-Device Transactions: Web 3.0, powered by smart contracts, enables autonomous transactions between IoT devices. Devices can negotiate and execute agreements based on predefined conditions, eliminating the need for intermediaries. For example, smart contracts can enable devices to autonomously manage energy consumption, negotiate pricing, or perform self-maintenance tasks, enhancing the efficiency and automation of IoT networks.</p></li>
<li><p>Monetization of IoT Data: Web 3.0 introduces decentralized data marketplaces, where IoT device owners can securely and transparently monetize their data. Through blockchain-based platforms, device-generated data can be tokenized, allowing users to retain ownership and control over their data while selling or sharing it with interested parties. This opens up new revenue streams and incentives for IoT device owners.</p></li>
<li><p>Edge Computing and Reduced Latency: Web 3.0 leverages edge computing to process and analyze IoT data at the network edge, closer to the devices generating the data. This reduces latency and enables real-time decision-making, making IoT applications more responsive and efficient. Edge computing also reduces the reliance on centralized cloud servers, improving scalability and reliability in IoT deployments.</p></li>
<li><p>Trust and Accountability: Web 3.0&rsquo;s transparent and immutable nature, powered by blockchain, enhances trust and accountability in the IoT ecosystem. Device behavior and data transactions can be recorded on the blockchain, creating an auditable and tamper-proof record. This fosters trust among stakeholders and enables better accountability in areas such as supply chain management, autonomous vehicles, and healthcare.</p></li>
</ul>


<p>In conclusion, Web 3.0 revolutionizes the Internet of Things by providing a decentralized, secure, and interoperable framework. It enhances data privacy, enables autonomous transactions, fosters trust, and unlocks new opportunities for monetization and collaboration. Web 3.0&rsquo;s integration with IoT promises a more connected, efficient, and trustworthy future for smart devices and applications.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Web 3.0 - Decentralizing Internet]]></title>
        <link href="https://rishijeet.github.io/blog/web-3-dot-0-decentralizing-internet/"/>
        <updated>2022-10-29T22:04:22+05:30</updated>
        <id>https://rishijeet.github.io/blog/web-3-dot-0-decentralizing-internet</id>
        <content type="html"><![CDATA[<p>The Internet has become an integral part of our lives, transforming the way we communicate, work, and access information. From the early days of Web 1.0, where static websites provided basic information, to the dynamic and interactive Web 2.0 era that brought social media, online collaboration, and user-generated content, the Internet has continuously evolved. Now, a new paradigm shift is on the horizon - Web 3.0. In this blog, we will explore the exciting possibilities and potential of Web 3.0, a decentralized and user-centric vision of the future internet.</p>

<ul>
<li>Defining Web 3.0: Decentralization and Interoperability</li>
</ul>


<p>Web 3.0, often referred to as the &ldquo;Decentralized Web,&rdquo; represents a departure from the centralized systems that dominate the current internet landscape. It is built on principles of decentralization, interoperability, and enhanced user control. Unlike Web 2.0, which relies heavily on centralized platforms and intermediaries, Web 3.0 envisions a distributed network where users have greater ownership and control over their data and digital identities.</p>

<ul>
<li>Blockchain Technology: The Backbone of Web 3.0</li>
</ul>


<p>At the core of Web 3.0 lies blockchain technology, the decentralized ledger system that underpins cryptocurrencies like Bitcoin and Ethereum. Blockchain provides a transparent, tamper-proof, and secure way to record and verify digital transactions. With Web 3.0, blockchain expands its scope beyond financial applications, enabling the development of decentralized applications (dApps), smart contracts, and decentralized autonomous organizations (DAOs).</p>

<!-- more -->


<ul>
<li>Decentralized Applications (dApps): Empowering Users</li>
</ul>


<p>Web 3.0 empowers users by placing them at the center of the internet experience. Decentralized applications (dApps) are one of the cornerstones of Web 3.0, offering users greater control, privacy, and ownership of their data. dApps leverage blockchain&rsquo;s decentralized nature to eliminate middlemen, reduce censorship, and enable direct peer-to-peer interactions. These applications span various domains, including finance, healthcare, supply chain management, and social media.</p>

<ul>
<li>Smart Contracts: Trust and Automation</li>
</ul>


<p>Smart contracts, powered by blockchain technology, are self-executing agreements that automatically enforce the terms and conditions encoded within them. Web 3.0 leverages smart contracts to facilitate trust and automation in a wide range of transactions. These contracts eliminate the need for intermediaries, reducing costs, increasing efficiency, and ensuring transparency. Smart contracts have the potential to revolutionize industries such as real estate, insurance, and intellectual property rights.</p>

<ul>
<li>Enhanced Privacy and Security</li>
</ul>


<p>Web 3.0 addresses growing concerns about data privacy and security. By leveraging decentralized systems and cryptographic techniques, Web 3.0 offers enhanced privacy protection. Users have greater control over their personal information, deciding when and how it is shared. Moreover, the decentralized nature of Web 3.0 reduces the risk of data breaches and single points of failure, enhancing overall security and resilience.</p>

<ul>
<li>The Internet of Things (IoT) in Web 3.0</li>
</ul>


<p>Web 3.0 integrates the Internet of Things (IoT) into its fabric, enabling seamless connectivity and communication between devices.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Rest API with Go &amp; Gorilla Mux]]></title>
        <link href="https://rishijeet.github.io/blog/rest-api-with-go-and-gorilla-mux/"/>
        <updated>2021-02-20T23:12:49+05:30</updated>
        <id>https://rishijeet.github.io/blog/rest-api-with-go-and-gorilla-mux</id>
        <content type="html"><![CDATA[<p>Gorilla is a web toolkit for the Go programming language. The gorilla/mux implements a request router and dispatcher for matching incomings requests to the respective handlers.</p>

<p>One of the cool feature it has is that the registered URLs can be built or reversed which helps maintaining the references to resources and nested routes are only tested if the parent route matches. This is useful to define groups of routes that share common conditions like a host, a path prefix or other repeated attributes.</p>

<!-- more -->


<p>The routes can be declared as mentioned below</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nx">NewRouter</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">HomeHandler</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">/</span><span class="nx">users</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">UsersHandler</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">/</span><span class="nx">blogs</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">BlogHandler</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'><span class="p">}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The basic http server code</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="c1">// Author: Rishijeet Mishra</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">net</span><span class="o">/</span><span class="nx">http</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">encoding</span><span class="o">/</span><span class="nx">json</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">log</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">gorilla</span><span class="o">/</span><span class="nx">mux</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nx">NewRouter</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Routes consist of a path and a handler function.</span>
</span><span class='line'>    <span class="nx">router</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">/</span><span class="nx">myhandler</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">MyHandler</span><span class="p">)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">pre</span><span class="p">&gt;&lt;</span><span class="nx">code</span><span class="p">&gt;</span><span class="c1">// Bind to a port and pass our router in</span>
</span><span class='line'><span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:5000&quot;</span><span class="p">,</span> <span class="nx">router</span><span class="p">))</span>
</span><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">code</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">MyHandler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//w.Write([]byte(&amp;ldquo;The page to be rendered&amp;rdquo;))</span>
</span><span class='line'>    <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Content</span><span class="o">-</span><span class="nx">Type</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">application</span><span class="o">/</span><span class="nx">json</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="kd">struct</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">key</span> <span class="kt">string</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Let&rsquo;s add the POST method</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="c1">// Add the route&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">/</span><span class="nx">add</span><span class="o">/</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">addItem</span><span class="p">).</span><span class="nx">Methods</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">POST</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="c1">//Add the func&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">addItem</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">itemholder</span>  <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nx">Vars</span><span class="o">&amp;</span><span class="nx">reg</span><span class="p">;[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">item</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span>
</span><span class='line'>    <span class="nx">data</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">itemholder</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">data</span><span class="p">)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Let&rsquo;s add the GET</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="c1">// The struct for grouping</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Item</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Data</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">var</span> <span class="nx">data</span> <span class="p">[]</span><span class="nx">Item</span> <span class="p">=</span> <span class="p">[]</span><span class="nx">Item</span><span class="p">{}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">addItem</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">){&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">pre</span><span class="p">&gt;&lt;</span><span class="nx">code</span><span class="p">&gt;</span><span class="kd">var</span> <span class="nx">latestItem</span> <span class="nx">Item</span>
</span><span class='line'><span class="nx">json</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">).</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">latestItem</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">data</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">latestItem</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// output the json</span>
</span><span class='line'><span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">code</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Mux supports the addition of middlewares to a Router, which are executed in the order they are added if a match is found, including its subrouters. Middlewares are (typically) small pieces of code which take one request, do something with it, and pass it down to another middleware or the final handler.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'>&lt;<span class="n">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">type</span> MiddlewareFunc func(http.Handler) http.Handler&lt;<span class="n">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span>&gt;<span class="n">//Add</span> the middleware to the route
</span><span class='line'>r :<span class="o">=</span> mux.NewRouter()
</span><span class='line'>r.HandleFunc(&amp;ldquo;<span class="n">/&amp;rdquo;,</span> handler)
</span><span class='line'>r.Use(loggingMiddleware)&lt;<span class="n">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span>&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>Click for more details on the <a href="https://github.com/gorilla/mux">gorilla/mux</a></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Tuning Apache Kafka’s performance]]></title>
        <link href="https://rishijeet.github.io/blog/tuning-apache-kafkas-performance/"/>
        <updated>2019-07-11T11:42:32+05:30</updated>
        <id>https://rishijeet.github.io/blog/tuning-apache-kafkas-performance</id>
        <content type="html"><![CDATA[<p>Well, Apache Kafka is one of the best pub-sub messaging system used widely across several technology’s based industries. Originated at LinkedIn and was open sourced in early 2011.</p>

<p>Ok, so what so special about <strong>Apache Kafka</strong> ? Here are the few things Kafka is meant to handle.</p>

<ul>
<li>High throughput to support large volume event feeds.</li>
<li>Real time processing of enormous amount of data.</li>
<li>Support large data backlogs to handle periodic ingestion from offline systems.</li>
<li>Support low - latency delivery of the messages compared to other messaging systems</li>
<li>High Availability, Fault Tolerance.</li>
</ul>


<p>So what else are you looking ?</p>

<!--more-->


<p>Now if you know about Apache Kafka a bit, here are few things we can fine tune to make it better in terms of performance. Let’s categories the system into the following aspects and see what could be done in each space.</p>

<ul>
<li>Producers</li>
<li>Brokers</li>
<li>Consumers</li>
</ul>


<a name="Producers"></a>
<h2>Producers</h2>

<a name="Asynchronous"></a>
<h3>Asynchronous</h3>

<p>Now think, how long you want to wait for the ack on the message sent to the broker ? Answer to this question will change the speed of handling the messages in the Kafka.</p>

<p>request.required.acks is the property of the producer.</p>

<p>Possible values for this are:</p>

<ul>
<li><code>0</code> = producer never waits for the ack from the broker. This will give you “Least durability and least latency”.</li>
<li><code>1</code> = producer gets ack from the master replica. This will give you “some durability and less latency”.</li>
<li><code>-1</code> = producer gets ack from the all the replicas. This will give you “most durability and most latency”.</li>
</ul>


<a name="Batching"></a>
<h3>Batching</h3>

<p>How about batching the messages ? Let’s use the asynchronous producers.</p>

<p><code>producer.type=1</code> to make the producers run async.</p>

<p>You can get the “callback” for the messages here to know their status. Now batch your messages to the brokers in different threads, this will improve the throughput. Some configuration to handle the messages in this scenario are:</p>

<ul>
<li><code>queue.buffer.max.ms</code> - Duration of the batch window.</li>
<li><code>batch.num.messages</code> - Number of messages to be sent in a batch.</li>
</ul>


<a name="Compression"></a>
<h3>Compression</h3>

<p>Use the compression property to reduces the I/O on the machine. We might also want to think of the CPU load when it decompresses the message object back. So, maintain a balance between the two. compression.codec - Values are none, gzip and snappy</p>

<p>For presumably large messages say - 10G , you might want to pass the file location of the share drive in the maessage rather than the payload itself. This would be tremendously faster.</p>

<a name="Timeout"></a>
<h3>Timeout</h3>

<p>Don’t wait for the message unnecessarily unless its is really really required. Have a “timeout”</p>

<p><code>request.timeout.ms</code> - The time until the broker waits before sending error back to the client.
Amount of time to block before dropping the messages when running in async mode ( default = indefinitely )</p>

<a name="Brokers"></a>
<h2>Brokers</h2>

<a name="Partition"></a>
<h3>Partition</h3>

<p>Plan to have as number of partitions = number of consumers. This will increase the concurrency, the more the partitions the more the concurrency. Remember, more the partitions more the latency too. Also, recommended to have one partition per physical disk to ensure I/O is not the bottleneck while writing the logs.</p>

<p>Use “kafka-reassign-partitions.sh” to ensure partition is not overloaded.</p>

<p>Some of the configurations worth mentioning here are:</p>

<ul>
<li><code>num.io.threads</code> - The number of I/O threads server uses to execute the requests.</li>
<li><code>num.partitions</code> - Number of partitions per topic</li>
<li><code>log.flush.interval,messages</code> - The number of messages written to the log partition before we force an fsync on the log.</li>
</ul>


<a name="Consumers"></a>
<h2>Consumers</h2>

<p>The max number of consumers for the topic is equal to number of partitions. Have enough partitions to handle all the consumers in your Kafka’s ecosystem.</p>

<p>Consumer in the same consumer group split the partitions among themselves. Adding more consumers to a group can enhance performance.</p>

<p>Performance is not affected by adding more consumer groups</p>

<p><code>replica.high.watermark.checkpoint.interval.ms</code> can affect the throughput. When reading from partition, you can mark the last point where you read the information. If you set checkpoint watermark for every event, you will have high durability but hit on the performance. Rather, set it to check the offset for every x number of messages wherein you have margin of safety and will less impact your throughput.</p>

<a name="Timeout"></a>
<h3>Timeout</h3>

<p>Choose the timeouts and onward pipeline properly. Also, refer to Apache Kafka doc for setting fetch size, time, auto-commit etc.</p>
]]></content>
    </entry>
    
</feed>
