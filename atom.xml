<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Rishijeet Mishra]]></title>
    <link href="https://rishijeet.github.io/atom.xml" rel="self"/>
    <link href="https://rishijeet.github.io/"/>
    <updated>2024-10-08T09:43:04+05:30</updated>
    <id>https://rishijeet.github.io/</id>
    <author>
        <name><![CDATA[Rishijeet Mishra]]></name>
        <email><![CDATA[rishijeet@gmail.com]]></email>
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Apache Airflow Architecture: A Detailed Overview]]></title>
        <link href="https://rishijeet.github.io/blog/apache-airflow-architecture-a-detailed-overview/"/>
        <updated>2024-10-08T09:35:07+05:30</updated>
        <id>https://rishijeet.github.io/blog/apache-airflow-architecture-a-detailed-overview</id>
        <content type="html"><![CDATA[<p>Apache Airflow is a powerful open-source platform used to programmatically author, schedule, and monitor workflows. It is designed for complex data engineering tasks, pipeline automation, and orchestrating multiple processes. This article will break down Airflow&rsquo;s architecture and provide a code example to help you understand how to work with it.</p>

<p><img src="https://rishijeet.github.io/images/2024/apache_airflow.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Key-Concepts-in-Airflow"></a>
<h3>Key Concepts in Airflow</h3>

<p>Before diving into the architecture, let’s go over some important Airflow concepts:</p>

<ul>
<li><strong>DAG (Directed Acyclic Graph)</strong>: The core abstraction in Airflow. A DAG represents a workflow, organized as a set of tasks that can be scheduled and executed.</li>
<li><strong>Operator</strong>: A specific task within a DAG. There are various types of operators, including PythonOperator, BashOperator, and others.</li>
<li><strong>Task</strong>: An individual step in a workflow.</li>
<li><strong>Executor</strong>: Responsible for running tasks on the worker nodes.</li>
<li><strong>Scheduler</strong>: Determines when DAGs and their tasks should run.</li>
<li><strong>Web Server</strong>: Provides a UI for monitoring DAGs and tasks.</li>
<li><strong>Metadata Database</strong>: Stores information about the DAGs and their run status.</li>
</ul>


<!--more-->


<p>Now that we&rsquo;ve introduced these basic concepts, let’s look at Airflow’s architecture in detail.</p>

<a name="Airflow-Architecture"></a>
<h2>Airflow Architecture</h2>

<p>The Airflow architecture is based on a distributed model where different components handle specific responsibilities. The primary components are:</p>

<a name="L-3c-strong-3e-Scheduler-3c--2f-strong-3e-"></a>
<h3><strong>Scheduler</strong></h3>

<p>The Scheduler is the heart of Airflow. It is responsible for determining when a task should run based on the scheduling interval defined in a DAG. It monitors all active DAGs and adds tasks to the execution queue.</p>

<ul>
<li><strong>DAG Parsing</strong>: The scheduler continuously parses DAG files to check for changes or new DAGs.</li>
<li><strong>Task Queueing</strong>: It places tasks that need execution in a queue.</li>
</ul>


<a name="L-3c-strong-3e-Executor-3c--2f-strong-3e-"></a>
<h3><strong>Executor</strong></h3>

<p>The Executor is responsible for running the tasks that the scheduler assigns to it. Different types of executors can be used, depending on the scale and complexity of the environment.</p>

<ul>
<li><strong>SequentialExecutor</strong>: Useful for development and debugging, but can only run one task at a time.</li>
<li><strong>LocalExecutor</strong>: Runs tasks in parallel on the local machine.</li>
<li><strong>CeleryExecutor</strong>: Uses Celery and Redis or RabbitMQ to run tasks in parallel across multiple worker nodes.</li>
</ul>


<a name="L-3c-strong-3e-Workers-3c--2f-strong-3e-"></a>
<h3><strong>Workers</strong></h3>

<p>Workers are the machines where the tasks are executed. In larger deployments, workers are distributed across multiple machines to handle high workloads efficiently. Workers receive tasks from the executor and execute them.</p>

<a name="L-3c-strong-3e-Web-Server-3c--2f-strong-3e-"></a>
<h3><strong>Web Server</strong></h3>

<p>The Web Server provides an interface for users to monitor and manage the execution of workflows. This is built on Flask and provides a rich UI to visualize DAGs, track task statuses, logs, etc.</p>

<a name="L-3c-strong-3e-Metadata-Database-3c--2f-strong-3e-"></a>
<h3><strong>Metadata Database</strong></h3>

<p>Airflow uses a relational database (e.g., PostgreSQL, MySQL) as the metadata store. It holds details about DAGs, task instances, users, connections, variables, and other essential metadata.</p>

<a name="L-3c-strong-3e-Flower-3c--2f-strong-3e-"></a>
<h3><strong>Flower</strong></h3>

<p>Flower is an optional component that can be used with the CeleryExecutor to monitor worker nodes and tasks in real-time.</p>

<a name="L-3c-strong-3e-Message-Broker--28-For-CeleryExecutor-29--3c--2f-strong-3e-"></a>
<h3><strong>Message Broker (For CeleryExecutor)</strong></h3>

<p>In a setup using CeleryExecutor, a message broker (RabbitMQ, Redis) is used to manage communication between the scheduler, executor, and workers.</p>

<a name="L-3c-strong-3e-DagBag-3c--2f-strong-3e-"></a>
<h3><strong>DagBag</strong></h3>

<p>DagBag is the collection of all the DAGs that are active and ready to be scheduled by the scheduler. Every time a new DAG file is added or updated, it is added to the DagBag for execution.</p>

<a name="Typical-Workflow"></a>
<h2>Typical Workflow</h2>

<ol>
<li><strong>Authoring DAGs</strong>: DAGs are Python scripts that define the workflow. The user defines a set of tasks (using operators) and their dependencies.</li>
<li><strong>Scheduler Monitoring</strong>: The scheduler parses the DAGs and determines when they should be run based on the defined scheduling intervals (e.g., daily, hourly).</li>
<li><strong>Task Queuing</strong>: Tasks that are ready for execution are placed in a queue by the scheduler.</li>
<li><strong>Execution by Workers</strong>: The executor pulls tasks from the queue and assigns them to worker nodes for execution.</li>
<li><strong>Task Tracking</strong>: As tasks are executed, the metadata database is updated with the task status (e.g., success, failure).</li>
<li><strong>Monitoring via Web UI</strong>: The status of DAGs and tasks can be monitored in real-time using the web server.</li>
</ol>


<a name="Code-Example"></a>
<h2>Code Example</h2>

<p>Let’s create a basic DAG that uses a PythonOperator to run a Python function.</p>

<a name="DAG-Definition"></a>
<h3>DAG Definition</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">timedelta</span><span class="p">,</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">airflow</span> <span class="kn">import</span> <span class="n">DAG</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">airflow.operators.python_operator</span> <span class="kn">import</span> <span class="n">PythonOperator</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Define a simple Python function to be used in the DAG</span>
</span><span class='line'><span class="k">def</span> <span class="nf">my_task</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello from Apache Airflow!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Define default arguments for the DAG</span>
</span><span class='line'><span class="n">default_args</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;owner&#39;</span><span class="p">:</span> <span class="s">&#39;airflow&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;depends_on_past&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;start_date&#39;</span><span class="p">:</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2024</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;email_on_failure&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;email_on_retry&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;retries&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;retry_delay&#39;</span><span class="p">:</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Initialize the DAG</span>
</span><span class='line'><span class="n">dag</span> <span class="o">=</span> <span class="n">DAG</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;my_first_dag&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">default_args</span><span class="o">=</span><span class="n">default_args</span><span class="p">,</span>
</span><span class='line'>    <span class="n">description</span><span class="o">=</span><span class="s">&#39;A simple DAG&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">schedule_interval</span><span class="o">=</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Define a PythonOperator that will run the Python function</span>
</span><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span>
</span><span class='line'>    <span class="n">task_id</span><span class="o">=</span><span class="s">&#39;print_hello&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">python_callable</span><span class="o">=</span><span class="n">my_task</span><span class="p">,</span>
</span><span class='line'>    <span class="n">dag</span><span class="o">=</span><span class="n">dag</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Breakdown-of-the-Code"></a>
<h3>Breakdown of the Code</h3>

<ul>
<li><strong>DAG Definition</strong>: We start by defining the DAG, including its <code>start_date</code>, schedule, and default arguments.</li>
<li><strong>PythonOperator</strong>: The <code>PythonOperator</code> is used to run the Python function <code>my_task</code> as a task in the DAG.</li>
<li><strong>Scheduling</strong>: In this case, the DAG is scheduled to run once per day.</li>
</ul>


<a name="Running-the-DAG"></a>
<h3>Running the DAG</h3>

<ol>
<li>Place the DAG file in your Airflow DAGs folder (typically located at <code>/airflow/dags</code>).</li>
<li>Start the Airflow scheduler using the command:
<code>bash
airflow scheduler
</code></li>
<li>Access the Airflow UI by starting the web server:
<code>bash
airflow webserver
</code>
Navigate to <code>localhost:8080</code> to monitor and trigger your DAG.</li>
</ol>


<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Apache Airflow is a flexible and scalable platform for orchestrating workflows. Its modular architecture—comprising the scheduler, workers, web server, and metadata database—makes it ideal for managing complex data pipelines in distributed environments. The ability to define DAGs using Python, combined with its rich set of operators and scheduling capabilities, provides a powerful way to automate data workflows.</p>

<p>The provided code example shows how simple it is to define and run a task using PythonOperator. As you scale up, Airflow supports a range of executors and message brokers to handle more complex, distributed workloads efficiently.</p>

<p>By understanding Airflow&rsquo;s architecture and seeing a basic example in action, you&rsquo;re well on your way to using Airflow to manage and automate workflows in your projects.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Ktor: A Lightweight Framework for Building Asynchronous Web Applications]]></title>
        <link href="https://rishijeet.github.io/blog/ktor-a-lightweight-framework-for-building-asynchronous-web-applications/"/>
        <updated>2024-08-24T13:13:46+05:30</updated>
        <id>https://rishijeet.github.io/blog/ktor-a-lightweight-framework-for-building-asynchronous-web-applications</id>
        <content type="html"><![CDATA[<p>Ktor is a Kotlin-based framework developed by JetBrains for building asynchronous web applications and microservices. Unlike many traditional frameworks, Ktor is designed to be lightweight and flexible, allowing developers to create highly customized applications without unnecessary overhead. Whether you&rsquo;re building a simple web server, a RESTful API, or a fully-fledged microservice, Ktor provides the tools you need while embracing Kotlin&rsquo;s expressive syntax.</p>

<p>In this blog, we’ll dive into what makes Ktor unique, explore its features, and walk through a basic example to illustrate its capabilities.
<img src="https://rishijeet.github.io/images/2024/ktor.webp" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="What-Makes-Ktor-Unique-3f-"></a>
<h2>What Makes Ktor Unique?</h2>

<a name="L-3c-strong-3e-Kotlin-First-3c--2f-strong-3e-"></a>
<h3><strong>Kotlin First</strong></h3>

<p>Ktor is built specifically for Kotlin, taking full advantage of Kotlin’s language features, such as coroutines, to provide a smooth and idiomatic experience. This tight integration with Kotlin allows for concise and expressive code.</p>

<a name="L-3c-strong-3e-Asynchronous-by-Design-3c--2f-strong-3e-"></a>
<h3><strong>Asynchronous by Design</strong></h3>

<p>Ktor is asynchronous at its core, leveraging Kotlin’s coroutines to handle multiple requests efficiently without blocking threads. This makes Ktor particularly suitable for high-performance applications that need to handle many simultaneous connections.</p>

<a name="L-3c-strong-3e-Modular-Architecture-3c--2f-strong-3e-"></a>
<h3><strong>Modular Architecture</strong></h3>

<p>Ktor is highly modular, allowing developers to include only the components they need. Whether you require authentication, session management, or templating, you can easily add or remove features as necessary, keeping your application lightweight.</p>

<!--more-->


<a name="L-3c-strong-3e-Flexibility-3c--2f-strong-3e-"></a>
<h3><strong>Flexibility</strong></h3>

<p>Ktor provides a high degree of flexibility in defining routes, handling requests, and responding to clients. This flexibility allows developers to build applications that fit their specific needs without being constrained by the framework.</p>

<a name="L-3c-strong-3e-Minimal-Configuration-3c--2f-strong-3e-"></a>
<h3><strong>Minimal Configuration</strong></h3>

<p>Ktor is designed to be simple to set up with minimal configuration. You can get a basic web server running with just a few lines of code, making it ideal for rapid development and prototyping.</p>

<a name="Setting-Up-a-Ktor-Project"></a>
<h2>Setting Up a Ktor Project</h2>

<p>Let’s walk through creating a simple Ktor application. We’ll start by setting up the project and then build a basic web server with some routing.</p>

<a name="Project-Setup"></a>
<h3>Project Setup</h3>

<p>To start, create a new Gradle project and add the following dependencies to your <code>build.gradle.kts</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="p">(</span><span class="s">&quot;jvm&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;1.8.0&quot;</span>
</span><span class='line'>    <span class="n">application</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">application</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mainClass</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">&quot;com.example.ApplicationKt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;io.ktor:ktor-server-core:2.2.1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;io.ktor:ktor-server-netty:2.2.1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;io.ktor:ktor-server-html-builder:2.2.1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;ch.qos.logback:logback-classic:1.4.3&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">testImplementation</span><span class="p">(</span><span class="s">&quot;io.ktor:ktor-server-tests:2.2.1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">testImplementation</span><span class="p">(</span><span class="s">&quot;org.jetbrains.kotlin:kotlin-test-junit:1.8.0&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Example:-Creating-a-Simple-Ktor-Web-Server"></a>
<h3>Example: Creating a Simple Ktor Web Server</h3>

<p>Now that the project is set up, let’s create a simple web server that responds to basic HTTP requests.</p>

<a name="Basic-Server-Setup"></a>
<h4>Basic Server Setup</h4>

<p>Create a new Kotlin file, <code>Application.kt</code>, and add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">com.example</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.application.*</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.http.*</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.response.*</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.request.*</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.routing.*</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.server.engine.embeddedServer</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.server.netty.Netty</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.features.ContentNegotiation</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.ktor.serialization.gson</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">embeddedServer</span><span class="p">(</span><span class="n">Netty</span><span class="p">,</span> <span class="n">port</span> <span class="p">=</span> <span class="m">8080</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">module</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}.</span><span class="n">start</span><span class="p">(</span><span class="n">wait</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">Application</span><span class="p">.</span><span class="n">module</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">install</span><span class="p">(</span><span class="n">ContentNegotiation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">gson</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">setPrettyPrinting</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">routing</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">call</span><span class="p">.</span><span class="n">respondText</span><span class="p">(</span><span class="s">&quot;Hello, Rishijeet!&quot;</span><span class="p">,</span> <span class="n">ContentType</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Plain</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">get</span><span class="p">(</span><span class="s">&quot;/json&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span><span class="s">&quot;message&quot;</span> <span class="n">to</span> <span class="s">&quot;Hello, JSON!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">call</span><span class="p">.</span><span class="n">respond</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">post</span><span class="p">(</span><span class="s">&quot;/submit&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">post</span> <span class="p">=</span> <span class="n">call</span><span class="p">.</span><span class="n">receive</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>            <span class="n">call</span><span class="p">.</span><span class="n">respond</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="s">&quot;status&quot;</span> <span class="n">to</span> <span class="s">&quot;Received&quot;</span><span class="p">,</span> <span class="s">&quot;data&quot;</span> <span class="n">to</span> <span class="n">post</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Code-Breakdown"></a>
<h3>Code Breakdown</h3>

<ul>
<li><p><strong>embeddedServer(Netty, port = 8080)</strong>: This line starts an embedded Netty server on port 8080. Ktor supports multiple engines like Netty, Jetty, and Tomcat, but Netty is commonly used for its performance and ease of use.</p></li>
<li><p><strong>ContentNegotiation</strong>: This feature is installed to automatically handle JSON serialization and deserialization using Gson, making it easy to work with JSON payloads.</p></li>
<li><p><strong>Routing</strong>: The <code>routing</code> block defines the various routes that the server will respond to:</p>

<ul>
<li><strong>GET <code>/</code></strong>: Responds with a simple &ldquo;Hello, Rishijeet!&rdquo; message in plain text.</li>
<li><strong>GET <code>/json</code></strong>: Responds with a JSON object containing a message.</li>
<li><strong>POST <code>/submit</code></strong>: Receives a JSON payload and responds with the same data, confirming that the server received it.</li>
</ul>
</li>
</ul>


<a name="Running-the-Server"></a>
<h3>Running the Server</h3>

<p>Run the server by executing the main function in <code>Application.kt</code>. Once the server is running, you can test the endpoints using a browser or tools like <code>curl</code> or Postman.</p>

<a name="Example-Requests"></a>
<h4>Example Requests</h4>

<ul>
<li><strong>GET Request to <code>/</code></strong>:</li>
</ul>


<pre><code class="``bash">  curl http://localhost:8080/
</code></pre>

<p>  <strong>Response</strong>: <code>Hello, Rishijeet!</code></p>

<ul>
<li><strong>GET Request to <code>/json</code></strong>:</li>
</ul>


<pre><code class="``bash">  curl http://localhost:8080/json
</code></pre>

<p>  <strong>Response</strong>:</p>

<pre><code class="``json">  {
    "message": "Hello, JSON!"
  }
</code></pre>

<ul>
<li><strong>POST Request to <code>/submit</code></strong>:</li>
</ul>


<pre><code class="``bash">  curl -X POST -H "Content-Type: application/json" -d '{"name": "Ktor", "type": "framework"}' http://localhost:8080/submit
</code></pre>

<p>  <strong>Response</strong>:</p>

<pre><code class="``json">  {
    "status": "Received",
    "data": {
      "name": "Ktor",
      "type": "framework"
    }
  }
</code></pre>

<a name="Advanced-Features-in-Ktor"></a>
<h3>Advanced Features in Ktor</h3>

<p>Ktor also provides more advanced features that make it suitable for production-ready applications:</p>

<a name="L-3c-strong-3e-Authentication-3c--2f-strong-3e-"></a>
<h4><strong>Authentication</strong></h4>

<p>Ktor supports various authentication mechanisms, including session-based, JWT, OAuth, and more. You can easily add authentication to your routes to secure your application.</p>

<a name="L-3c-strong-3e-WebSockets-3c--2f-strong-3e-"></a>
<h4><strong>WebSockets</strong></h4>

<p>Ktor has built-in support for WebSockets, enabling real-time communication between the server and clients.</p>

<a name="L-3c-strong-3e-Content-Negotiation-and-Serialization-3c--2f-strong-3e-"></a>
<h4><strong>Content Negotiation and Serialization</strong></h4>

<p>Ktor’s flexible content negotiation allows you to work with multiple formats (JSON, XML, etc.) and serialization libraries (Gson, Kotlinx.serialization).</p>

<a name="L-3c-strong-3e-HTTP-Client-3c--2f-strong-3e-"></a>
<h4><strong>HTTP Client</strong></h4>

<p>Ktor also includes an HTTP client, making it easy to send HTTP requests from within your application. This is particularly useful when integrating with other services or APIs.</p>

<a name="Example:-Securing-Routes-with-Authentication"></a>
<h3>Example: Securing Routes with Authentication</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">install</span><span class="p">(</span><span class="n">Authentication</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">basic</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">&quot;auth&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">realm</span> <span class="p">=</span> <span class="s">&quot;Ktor Server&quot;</span>
</span><span class='line'>        <span class="n">validate</span> <span class="p">{</span> <span class="n">credentials</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">credentials</span><span class="p">.</span><span class="n">name</span> <span class="p">==</span> <span class="s">&quot;user&quot;</span> <span class="p">&amp;&amp;</span> <span class="n">credentials</span><span class="p">.</span><span class="n">password</span> <span class="p">==</span> <span class="s">&quot;password&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">UserIdPrincipal</span><span class="p">(</span><span class="n">credentials</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">null</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">routing</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">authenticate</span><span class="p">(</span><span class="s">&quot;auth&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">(</span><span class="s">&quot;/secure&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">call</span><span class="p">.</span><span class="n">respondText</span><span class="p">(</span><span class="s">&quot;You are authenticated!&quot;</span><span class="p">,</span> <span class="n">ContentType</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Plain</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Example:-WebSocket-Communication"></a>
<h3>Example: WebSocket Communication</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">routing</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">webSocket</span><span class="p">(</span><span class="s">&quot;/chat&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">frame</span> <span class="k">in</span> <span class="n">incoming</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">when</span> <span class="p">(</span><span class="n">frame</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">Frame</span><span class="p">.</span><span class="n">Text</span> <span class="p">-&gt;</span> <span class="n">send</span><span class="p">(</span><span class="n">Frame</span><span class="p">.</span><span class="n">Text</span><span class="p">(</span><span class="s">&quot;Server received: ${frame.readText()}&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Ktor is a powerful and flexible framework for building asynchronous web applications in Kotlin. Its Kotlin-first approach, coupled with features like modularity, asynchronous processing, and minimal configuration, makes it an excellent choice for developers looking to build lightweight and high-performance web applications.</p>

<p>Whether you’re building a simple API, a microservice, or a real-time application with WebSockets, Ktor provides the tools you need while allowing for a high degree of customization. As the Kotlin ecosystem continues to grow, Ktor is likely to become even more popular among developers seeking a modern, efficient web framework.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Vert.x: The Reactive Toolkit for Modern Applications]]></title>
        <link href="https://rishijeet.github.io/blog/vert-dot-x-the-reactive-toolkit-for-modern-applications/"/>
        <updated>2024-08-03T23:22:56+05:30</updated>
        <id>https://rishijeet.github.io/blog/vert-dot-x-the-reactive-toolkit-for-modern-applications</id>
        <content type="html"><![CDATA[<p>In the realm of modern web applications, responsiveness and scalability are paramount. Vert.x, a toolkit for building reactive applications on the JVM, stands out due to its performance and flexibility. Vert.x is polyglot, allowing developers to use multiple languages such as Java, JavaScript, Groovy, Ruby, Kotlin, and Scala. Its non-blocking nature and event-driven architecture make it an excellent choice for developing high-throughput, low-latency applications.</p>

<p>In this blog, we&rsquo;ll explore the unique aspects of Vert.x, how it leverages the reactive programming model, and provide examples to illustrate its capabilities.
<img src="https://rishijeet.github.io/images/2024/vertx.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="What-Makes-Vert.x-Unique-3f-"></a>
<h2>What Makes Vert.x Unique?</h2>

<a name="L-3c-strong-3e-Polyglot-Support-3c--2f-strong-3e-"></a>
<h3><strong>Polyglot Support</strong></h3>

<p>Vert.x allows developers to write applications in multiple languages, providing flexibility and enabling teams to use the best language for their needs.</p>

<a name="L-3c-strong-3e-Event-2d-Driven-and-Non-2d-Blocking-3c--2f-strong-3e-"></a>
<h3><strong>Event-Driven and Non-Blocking</strong></h3>

<p>Vert.x uses a non-blocking, event-driven model, allowing it to handle many concurrent connections with minimal threads. This leads to better resource utilization and scalability.</p>

<a name="L-3c-strong-3e-Reactive-Programming-3c--2f-strong-3e-"></a>
<h3><strong>Reactive Programming</strong></h3>

<p>Vert.x embraces reactive programming principles, making it easier to build responsive, resilient, and elastic applications. It integrates seamlessly with reactive libraries like RxJava and Reactor.</p>

<a name="L-3c-strong-3e-Verticles-and-Event-Bus-3c--2f-strong-3e-"></a>
<h3><strong>Verticles and Event Bus</strong></h3>

<p>Vert.x applications are composed of Verticles, which are units of deployment and concurrency. The Event Bus facilitates communication between Verticles, enabling a highly decoupled architecture.</p>

<!--more-->


<a name="L-3c-strong-3e-Module-System-3c--2f-strong-3e-"></a>
<h3><strong>Module System</strong></h3>

<p>Vert.x offers a powerful module system, allowing for easy reuse and deployment of components.</p>

<a name="Getting-Started-with-Vert.x"></a>
<h2>Getting Started with Vert.x</h2>

<p>Let&rsquo;s walk through setting up a simple Vert.x application and explore its features.</p>

<a name="Example:-Setting-Up-a-Vert.x-Project"></a>
<h3>Example: Setting Up a Vert.x Project</h3>

<a name="Project-Structure"></a>
<h4>Project Structure</h4>

<p>We&rsquo;ll create a basic Vert.x application in Java. Ensure you have Maven or Gradle installed.</p>

<a name="Maven-Project-Setup"></a>
<h4>Maven Project Setup</h4>

<p><strong>pom.xml:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.example<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>vertx-demo<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>        <span class="nt">&lt;maven.compiler.source&gt;</span>11<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;maven.compiler.target&gt;</span>11<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span><span class='line'>        <span class="nt">&lt;vertx.version&gt;</span>4.3.4<span class="nt">&lt;/vertx.version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>io.vertx<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>vertx-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>${vertx.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>io.vertx<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>vertx-web<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>${vertx.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>io.fabric8<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>docker-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>0.34.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Example:-Creating-a-Simple-HTTP-Server"></a>
<h3>Example: Creating a Simple HTTP Server</h3>

<a name="Main-Verticle"></a>
<h4>Main Verticle</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.AbstractVerticle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.Vertx</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.ext.web.Router</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.ext.web.RoutingContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainVerticle</span> <span class="kd">extends</span> <span class="n">AbstractVerticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Router</span> <span class="n">router</span> <span class="o">=</span> <span class="n">Router</span><span class="o">.</span><span class="na">router</span><span class="o">(</span><span class="n">vertx</span><span class="o">);</span>
</span><span class='line'>        <span class="n">router</span><span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="na">handler</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">handleRoot</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">()</span>
</span><span class='line'>             <span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">router</span><span class="o">)</span>
</span><span class='line'>             <span class="o">.</span><span class="na">listen</span><span class="o">(</span><span class="mi">8888</span><span class="o">,</span> <span class="n">result</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                 <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">succeeded</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server started on port 8888&quot;</span><span class="o">);</span>
</span><span class='line'>                 <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Failed to start server: &quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">cause</span><span class="o">());</span>
</span><span class='line'>                 <span class="o">}</span>
</span><span class='line'>             <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleRoot</span><span class="o">(</span><span class="n">RoutingContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">response</span><span class="o">()</span>
</span><span class='line'>               <span class="o">.</span><span class="na">putHeader</span><span class="o">(</span><span class="s">&quot;content-type&quot;</span><span class="o">,</span> <span class="s">&quot;text/plain&quot;</span><span class="o">)</span>
</span><span class='line'>               <span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;Hello, Rishijeet!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Vertx</span> <span class="n">vertx</span> <span class="o">=</span> <span class="n">Vertx</span><span class="o">.</span><span class="na">vertx</span><span class="o">();</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">deployVerticle</span><span class="o">(</span><span class="k">new</span> <span class="nf">MainVerticle</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple Vert.x application sets up an HTTP server that listens on port 8888 and responds with &ldquo;Hello, Rishijeet!&rdquo;
when the root URL is accessed.</p>

<a name="Example:-Deploying-Verticles"></a>
<h3>Example: Deploying Verticles</h3>

<p>Vert.x applications are composed of Verticles. You can deploy multiple Verticles, enabling a modular and scalable architecture.</p>

<a name="Worker-Verticle"></a>
<h4>Worker Verticle</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.AbstractVerticle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.Promise</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WorkerVerticle</span> <span class="kd">extends</span> <span class="n">AbstractVerticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Promise</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">startPromise</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">setPeriodic</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="n">id</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Worker Verticle: &quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">startPromise</span><span class="o">.</span><span class="na">complete</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Deploying-Verticles"></a>
<h4>Deploying Verticles</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.Vertx</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainApp</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Vertx</span> <span class="n">vertx</span> <span class="o">=</span> <span class="n">Vertx</span><span class="o">.</span><span class="na">vertx</span><span class="o">();</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">deployVerticle</span><span class="o">(</span><span class="k">new</span> <span class="nf">MainVerticle</span><span class="o">());</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">deployVerticle</span><span class="o">(</span><span class="k">new</span> <span class="nf">WorkerVerticle</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Example:-Using-the-Event-Bus"></a>
<h3>Example: Using the Event Bus</h3>

<p>The Event Bus allows Verticles to communicate asynchronously.</p>

<a name="Sender-Verticle"></a>
<h4>Sender Verticle</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.AbstractVerticle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.Vertx</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SenderVerticle</span> <span class="kd">extends</span> <span class="n">AbstractVerticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">eventBus</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;example.address&quot;</span><span class="o">,</span> <span class="s">&quot;Hello from SenderVerticle!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Vertx</span> <span class="n">vertx</span> <span class="o">=</span> <span class="n">Vertx</span><span class="o">.</span><span class="na">vertx</span><span class="o">();</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">deployVerticle</span><span class="o">(</span><span class="k">new</span> <span class="nf">SenderVerticle</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Receiver-Verticle"></a>
<h4>Receiver Verticle</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.AbstractVerticle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.vertx.core.Vertx</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReceiverVerticle</span> <span class="kd">extends</span> <span class="n">AbstractVerticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">eventBus</span><span class="o">().</span><span class="na">consumer</span><span class="o">(</span><span class="s">&quot;example.address&quot;</span><span class="o">,</span> <span class="n">message</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Received message: &quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Vertx</span> <span class="n">vertx</span> <span class="o">=</span> <span class="n">Vertx</span><span class="o">.</span><span class="na">vertx</span><span class="o">();</span>
</span><span class='line'>        <span class="n">vertx</span><span class="o">.</span><span class="na">deployVerticle</span><span class="o">(</span><span class="k">new</span> <span class="nf">ReceiverVerticle</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Conclusion"></a>
<h3>Conclusion</h3>

<p>Vert.x offers a powerful and flexible toolkit for building modern, reactive applications. Its unique features, including polyglot support, non-blocking event-driven architecture, and the Event Bus, make it an excellent choice for high-throughput, low-latency applications. By leveraging Verticles and the reactive programming model, developers can build scalable, maintainable, and efficient applications.</p>

<p>Understanding the power of Vert.x and how to use its features effectively can significantly improve the responsiveness and scalability of your applications. Whether you&rsquo;re building microservices, real-time web applications, or IoT solutions, Vert.x provides the tools you need to succeed.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Exploring Coroutines: Concurrency Made Easy]]></title>
        <link href="https://rishijeet.github.io/blog/exploring-coroutines-concurrency-made-easy/"/>
        <updated>2024-08-03T18:29:50+05:30</updated>
        <id>https://rishijeet.github.io/blog/exploring-coroutines-concurrency-made-easy</id>
        <content type="html"><![CDATA[<p>Concurrency is a critical aspect of modern software development, enabling applications to perform multiple tasks simultaneously. Traditional approaches to concurrency, such as threads, often come with complexity and overhead. Coroutines offer a powerful alternative by providing a simpler, more efficient way to handle concurrent operations. In this blog, we&rsquo;ll delve into the world of coroutines, explore what makes them unique, and provide examples to illustrate their usage. We&rsquo;ll also discuss alternative concurrency models and their trade-offs.</p>

<a name="What-Are-Coroutines-3f-"></a>
<h2>What Are Coroutines?</h2>

<p>Coroutines are a concurrency primitive that allows functions to pause execution and resume later, enabling non-blocking asynchronous code execution. Unlike traditional threads, coroutines are lightweight, have minimal overhead, and do not require OS-level context switching.</p>

<a name="Key-Features-of-Coroutines"></a>
<h3>Key Features of Coroutines</h3>

<ol>
<li><strong>Lightweight</strong>: Coroutines are more lightweight than threads, allowing you to run thousands of coroutines simultaneously without significant performance impact.</li>
<li><strong>Non-Blocking</strong>: Coroutines enable non-blocking asynchronous code execution, which is crucial for I/O-bound and network-bound tasks.</li>
<li><strong>Structured Concurrency</strong>: Coroutines support structured concurrency, making it easier to manage the lifecycle of concurrent tasks.</li>
<li><strong>Suspend Functions</strong>: Functions can be suspended and resumed at a later time, allowing for more readable and maintainable asynchronous code.</li>
</ol>


<a name="Coroutines-in-Kotlin"></a>
<h2>Coroutines in Kotlin</h2>

<p>Kotlin is one of the languages that has built-in support for coroutines, making it a popular choice for modern asynchronous programming. Let&rsquo;s explore coroutines in Kotlin with some examples.</p>

<!--more-->


<a name="Example:-Basic-Coroutine"></a>
<h3>Example: Basic Coroutine</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">import</span> <span class="nn">kotlinx.coroutines.*</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Rishijeet!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello,&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, <code>runBlocking</code> starts a coroutine and blocks the main thread until the coroutine completes. The
<code>launch</code> function starts a new coroutine that delays for 1 second and then prints &ldquo;Rishijeet!&rdquo;. Meanwhile, &ldquo;Hello,&rdquo; is
printed immediately.</p>

<a name="Example:-Structured-Concurrency"></a>
<h3>Example: Structured Concurrency</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">import</span> <span class="nn">kotlinx.coroutines.*</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">job</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">doWork</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Waiting for work to complete...&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">job</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Work completed!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">doWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">2000L</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Work in progress...&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example demonstrates structured concurrency. The <code>doWork</code> function is a suspend function that simulates work with a 2-second delay. The <code>launch</code> function starts a coroutine that runs <code>doWork</code>, and <code>job.join()</code> waits for the coroutine to complete.</p>

<a name="Example:-Async-and-Await"></a>
<h3>Example: Async and Await</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">import</span> <span class="nn">kotlinx.coroutines.*</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">deferred</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">computeValue</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Waiting for result...&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">deferred</span><span class="p">.</span><span class="n">await</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Result: $result&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">computeValue</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="m">42</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the <code>async</code> function starts a coroutine that computes a value asynchronously. The <code>await</code> function suspends the coroutine until the result is available.</p>

<a name="Alternatives-to-Coroutines"></a>
<h2>Alternatives to Coroutines</h2>

<p>While coroutines offer many advantages, there are other concurrency models to consider. Each has its own trade-offs and use cases.</p>

<a name="L-3c-strong-3e-Threads-3c--2f-strong-3e-"></a>
<h3><strong>Threads</strong></h3>

<p>Threads are the traditional approach to concurrency. They are managed by the OS and provide true parallelism but come with significant overhead and complexity.</p>

<p><strong>Example: Threads in Java</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Rishijeet!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello,&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L-3c-strong-3e-Reactive-Programming-3c--2f-strong-3e-"></a>
<h3><strong>Reactive Programming</strong></h3>

<p>Reactive programming, using libraries like RxJava or Reactor, is another approach to concurrency. It is based on the Observer pattern and provides powerful abstractions for asynchronous programming.</p>

<p><strong>Example: RxJava</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">io.reactivex.Observable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RxJavaExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">&quot;Hello, Rishijeet!&quot;</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">delay</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L-3c-strong-3e-Async-2f-Await--28-Promises-29--3c--2f-strong-3e-"></a>
<h3><strong>Async/Await (Promises)</strong></h3>

<p>Async/await is a popular pattern in languages like JavaScript and Python. It simplifies asynchronous code by allowing it to be written in a synchronous style.</p>

<p><strong>Example: Async/Await in JavaScript</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">delay</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span> <span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello,&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">await</span> <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Rishijeet!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">main</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Conclusion"></a>
<h3>Conclusion</h3>

<p>Coroutines offer a powerful and efficient way to handle concurrency, providing simplicity and performance advantages over traditional threads. They are particularly well-suited for I/O-bound and network-bound tasks, enabling non-blocking asynchronous code execution. While there are alternative concurrency models like threads, reactive programming, and async/await, coroutines stand out for their lightweight nature and structured concurrency.</p>

<p>Kotlin&rsquo;s built-in support for coroutines makes it an excellent choice for modern asynchronous programming. By leveraging coroutines, developers can write more readable, maintainable, and efficient concurrent code.</p>

<p>Understanding the various concurrency models and their trade-offs allows developers to choose the best approach for their specific use cases. Whether using coroutines, threads, reactive programming, or async/await, the key is to find the right balance between simplicity, performance, and scalability.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Micronaut: The Modern Framework for Microservices]]></title>
        <link href="https://rishijeet.github.io/blog/micronaut-the-modern-framework-for-microservices/"/>
        <updated>2024-08-01T23:37:24+05:30</updated>
        <id>https://rishijeet.github.io/blog/micronaut-the-modern-framework-for-microservices</id>
        <content type="html"><![CDATA[<p>Micronaut is a JVM-based framework designed for building modular, easily testable microservices and serverless applications. It is built with modern development practices and performance optimizations in mind. Here, we’ll explore Micronaut in depth, focusing on its core features, architecture, and advanced mechanisms that set it apart from traditional frameworks.</p>

<a name="L-3c-strong-3e-Core-Features-of-Micronaut-3c--2f-strong-3e-"></a>
<h3><strong>Core Features of Micronaut</strong></h3>

<a name="L-3c-strong-3e-Compile-2d-Time-Dependency-Injection-3c--2f-strong-3e-"></a>
<h4><strong>Compile-Time Dependency Injection</strong></h4>

<p>Micronaut&rsquo;s approach to dependency injection (DI) and aspect-oriented programming (AOP) is handled at compile time rather than runtime. This is achieved through annotation processing, which generates all necessary metadata during compilation. This approach has several advantages:</p>

<ul>
<li><strong>Faster Startup</strong>: No need for reflection-based DI at runtime.</li>
<li><strong>Reduced Memory Overhead</strong>: Less memory consumption as the runtime doesn’t have to handle DI.</li>
<li><strong>Compile-Time Safety</strong>: Errors related to DI are caught at compile time, improving code reliability.</li>
</ul>


<!--more-->


<p><strong>Example:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">example</span><span class="o">.</span><span class="na">micronaut</span><span class="o">.</span><span class="na">demo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.micronaut.context.annotation.Factory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jakarta.inject.Singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Factory</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanFactory</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Singleton</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">GreetingService</span> <span class="nf">greetingService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">GreetingServiceImpl</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">GreetingService</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">greet</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GreetingServiceImpl</span> <span class="kd">implements</span> <span class="n">GreetingService</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">greet</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, <code>GreetingService</code> is provided by <code>BeanFactory</code> at compile time, and Micronaut handles all dependency management without runtime reflection.</p>

<a name="L-3c-strong-3e-Minimal-Reflection-and-Proxies-3c--2f-strong-3e-"></a>
<h4><strong>Minimal Reflection and Proxies</strong></h4>

<p>Micronaut avoids the use of runtime reflection and dynamic proxies, which are common in other frameworks. Instead, it uses compile-time code generation to handle DI and AOP, which:</p>

<ul>
<li><strong>Reduces Overhead</strong>: Less runtime overhead compared to reflection.</li>
<li><strong>Improves Performance</strong>: Faster execution and lower memory consumption.</li>
</ul>


<p><strong>Example of Avoiding Reflection:</strong></p>

<p>Instead of using reflection to create proxies, Micronaut generates the required bytecode during compilation.</p>

<a name="L-3c-strong-3e-Built-2d-in-Cloud-2d-Native-Support-3c--2f-strong-3e-"></a>
<h4><strong>Built-in Cloud-Native Support</strong></h4>

<p>Micronaut has robust support for cloud-native patterns such as:</p>

<ul>
<li><strong>Service Discovery</strong>: Integration with service discovery systems like Consul and Eureka.</li>
<li><strong>Configuration Management</strong>: Supports configuration from various sources including environment variables, configuration files, and cloud-based configuration services.</li>
<li><strong>Distributed Tracing</strong>: Integration with tracing systems such as Zipkin and Jaeger.</li>
</ul>


<p><strong>Example: Configuring Service Discovery</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">micronaut</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">application</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">demo-application</span>
</span><span class='line'>  <span class="l-Scalar-Plain">discovery</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">client</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">consul</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>        <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8500</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration enables Consul-based service discovery.</p>

<a name="L-3c-strong-3e-Testing-Support-3c--2f-strong-3e-"></a>
<h4><strong>Testing Support</strong></h4>

<p>Micronaut provides built-in testing support with:</p>

<ul>
<li><strong>Embedded Server</strong>: For running HTTP tests without needing an actual server instance.</li>
<li><strong>Mocking</strong>: Direct support for mocking and injecting dependencies into tests.</li>
</ul>


<p><strong>Example of Testing with Micronaut:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">example</span><span class="o">.</span><span class="na">micronaut</span><span class="o">.</span><span class="na">demo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.micronaut.http.client.HttpClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.micronaut.http.client.annotation.Client</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.micronaut.test.extensions.junit5.annotation.MicronautTest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jakarta.inject.Inject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@MicronautTest</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="nd">@Client</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">HttpClient</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHelloEndpoint</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">toBlocking</span><span class="o">().</span><span class="na">retrieve</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;Hello, Micronaut!&quot;</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test case uses Micronaut&rsquo;s HTTP client for testing without needing an external server.</p>

<a name="L-3c-strong-3e-Small-Footprint-3c--2f-strong-3e-"></a>
<h4><strong>Small Footprint</strong></h4>

<p>Micronaut applications are lightweight, making them suitable for serverless and containerized environments. The compiled bytecode is optimized to reduce memory footprint and startup times.</p>

<p><strong>Example Dockerfile for Micronaut Application:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Dockerfile'><span class='line'><span class="k">FROM</span> openjdk:17-jdk-alpine
</span><span class='line'><span class="k">VOLUME</span> /tmp
</span><span class='line'>COPY build/libs/demo-application-0.1-all.jar app.jar
</span><span class='line'><span class="k">ENTRYPOINT</span> <span class="o">[</span><span class="s2">&quot;java&quot;</span>,<span class="s2">&quot;-jar&quot;</span>,<span class="s2">&quot;/app.jar&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This Dockerfile packages the Micronaut application into a minimal Docker container.</p>

<a name="L-3c-strong-3e-Architecture-of-Micronaut-3c--2f-strong-3e-"></a>
<h3><strong>Architecture of Micronaut</strong></h3>

<p>Micronaut is designed with a modular architecture that emphasizes performance, modularity, and ease of use.</p>

<a name="L-3c-strong-3e-Compile-2d-Time-Dependency-Injection-3c--2f-strong-3e-"></a>
<h4><strong>Compile-Time Dependency Injection</strong></h4>

<p>Micronaut uses a custom annotation processor to handle DI and AOP at compile time. This processor generates the required bytecode for dependency injection, which is then included in the compiled application. This approach avoids the overhead associated with runtime reflection.</p>

<a name="L-3c-strong-3e-AOT-Compilation-3c--2f-strong-3e-"></a>
<h4><strong>AOT Compilation</strong></h4>

<p>Micronaut uses Ahead-of-Time (AOT) compilation for optimizing application performance. The framework generates optimized bytecode and metadata during the build process, which improves startup time and reduces runtime overhead.</p>

<a name="L-3c-strong-3e-Truffle-2d-Based-Optimization-3c--2f-strong-3e-"></a>
<h4><strong>Truffle-Based Optimization</strong></h4>

<p>Micronaut integrates with the Truffle framework (part of GraalVM) for optimizing language execution. This integration allows for advanced optimizations and efficient execution of polyglot code.</p>

<a name="L-3c-strong-3e-Event-2d-Driven-Architecture-3c--2f-strong-3e-"></a>
<h4><strong>Event-Driven Architecture</strong></h4>

<p>Micronaut supports event-driven programming models, allowing for the development of reactive applications. This model is particularly useful for building responsive and scalable microservices.</p>

<p><strong>Example: Event-Driven Service</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">example</span><span class="o">.</span><span class="na">micronaut</span><span class="o">.</span><span class="na">demo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">io.micronaut.context.annotation.Bean</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jakarta.inject.Singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Singleton</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleEvent</span><span class="o">(</span><span class="n">String</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Handle event</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L-3c-strong-3e-Modularity-3c--2f-strong-3e-"></a>
<h4><strong>Modularity</strong></h4>

<p>Micronaut’s modular architecture enables developers to use only the parts of the framework they need. This reduces bloat and allows for more efficient applications.</p>

<a name="L-3c-strong-3e-Advanced-Mechanisms-3c--2f-strong-3e-"></a>
<h3><strong>Advanced Mechanisms</strong></h3>

<a name="L-3c-strong-3e-Compile-2d-Time-Metaprogramming-3c--2f-strong-3e-"></a>
<h4><strong>Compile-Time Metaprogramming</strong></h4>

<p>Micronaut’s compile-time metaprogramming capabilities allow developers to write code that is processed and optimized during the build phase. This includes generating code for dependency injection, AOP, and other features.</p>

<p><strong>Example: Compile-Time Code Generation</strong></p>

<p>Micronaut generates code for dependency injection and other features using its annotation processor. This generated code is included in the final build artifact.</p>

<a name="L-3c-strong-3e-Advanced-Configuration-Management-3c--2f-strong-3e-"></a>
<h4><strong>Advanced Configuration Management</strong></h4>

<p>Micronaut provides flexible configuration management, allowing configuration values to be sourced from various locations including environment variables, files, and cloud-based configuration services.</p>

<p><strong>Example Configuration File:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">micronaut</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">application</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">demo-application</span>
</span><span class='line'>  <span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">file:/etc/myapp/config.yml</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">env</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L-3c-strong-3e-Service-Discovery-and-Load-Balancing-3c--2f-strong-3e-"></a>
<h4><strong>Service Discovery and Load Balancing</strong></h4>

<p>Micronaut integrates with various service discovery and load balancing systems, enabling applications to register themselves and discover other services dynamically.</p>

<p><strong>Example: Consul Service Discovery</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">micronaut</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">discovery</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">client</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">consul</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>        <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8500</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration sets up Micronaut to use Consul for service discovery.</p>

<a name="L-3c-strong-3e-Distributed-Tracing-3c--2f-strong-3e-"></a>
<h4><strong>Distributed Tracing</strong></h4>

<p>Micronaut supports distributed tracing, which is essential for monitoring and troubleshooting microservices.</p>

<p><strong>Example: Zipkin Integration</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">micronaut</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tracing</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">zipkin</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://localhost:9411/api/v2/spans</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration enables Zipkin-based tracing.</p>

<a name="Conclusion"></a>
<h3>Conclusion</h3>

<p>Micronaut represents a significant advancement in JVM-based frameworks, offering compile-time dependency injection, minimal reflection, built-in cloud-native support, and a small memory footprint. Its modern architecture and advanced mechanisms make it particularly suited for microservices and cloud-native applications. By leveraging Micronaut, developers can build high-performance, scalable, and maintainable applications that take full advantage of modern computing environments.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Introduction to GraalVM]]></title>
        <link href="https://rishijeet.github.io/blog/introduction-to-graalvm/"/>
        <updated>2024-08-01T23:11:16+05:30</updated>
        <id>https://rishijeet.github.io/blog/introduction-to-graalvm</id>
        <content type="html"><![CDATA[<p>GraalVM is a high-performance runtime that provides significant improvements in application performance and efficiency. It is designed to execute applications written in Java, JavaScript, LLVM-based languages such as C and C++, and other dynamic languages. What sets GraalVM apart from traditional JVMs is its advanced Just-In-Time (JIT) compiler and its ability to perform ahead-of-time (AOT) compilation, which can yield impressive performance gains.</p>

<p><img src="https://rishijeet.github.io/images/2024/graalvm.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Why-is-GraalVM-Fast-3f-"></a>
<h3>Why is GraalVM Fast?</h3>

<p>GraalVM&rsquo;s performance advantage stems from several advanced mechanisms:</p>

<ul>
<li><p><strong>High-Performance JIT Compiler</strong>:</p>

<ul>
<li>GraalVM includes a highly optimized JIT compiler written in Java. The compiler uses advanced optimization techniques such as inlining, escape analysis, and speculative optimizations to produce highly optimized machine code.</li>
</ul>
</li>
<li><p><strong>Ahead-of-Time (AOT) Compilation</strong>:</p>

<ul>
<li>GraalVM&rsquo;s Native Image feature allows applications to be compiled ahead of time into standalone executables. This reduces startup time and memory footprint, as the runtime does not need to load and interpret bytecode at startup.</li>
</ul>
</li>
<li><p><strong>Polyglot Capabilities</strong>:</p>

<ul>
<li>GraalVM can run code from multiple languages (e.g., JavaScript, Ruby, R, Python) in the same runtime without the need for foreign function interfaces. This reduces the overhead associated with context switching and data marshalling between languages.</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p><strong>Truffle Framework</strong>:</p>

<ul>
<li>GraalVM includes the Truffle framework, which enables the implementation of interpreters for various languages that can be optimized at runtime. Truffle allows for deep language-specific optimizations and efficient inter-language calls.</li>
</ul>
</li>
<li><p><strong>Partial Escape Analysis</strong>:</p>

<ul>
<li>GraalVM uses partial escape analysis to eliminate unnecessary object allocations and reduce garbage collection overhead. This technique determines whether objects can be safely allocated on the stack instead of the heap.</li>
</ul>
</li>
</ul>


<a name="Code-Example:-Java-Performance-with-GraalVM"></a>
<h3>Code Example: Java Performance with GraalVM</h3>

<p>Let&rsquo;s compare the performance of a simple Java application running on the standard JVM versus GraalVM.</p>

<a name="Example-Code:-Fibonacci-Calculation"></a>
<h4>Example Code: Fibonacci Calculation</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Fibonacci</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">40</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Fibonacci number at position &quot;</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="s">&quot; is &quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Execution time: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1_000_000</span> <span class="o">+</span> <span class="s">&quot; ms&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fib</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">fib</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Benchmarking-with-Standard-JVM"></a>
<h4>Benchmarking with Standard JVM</h4>

<p>Compile and run the application using the standard JVM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javac Fibonacci.java
</span><span class='line'>java Fibonacci
</span></code></pre></td></tr></table></div></figure>


<p><strong>Output:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Fibonacci number at position <span class="m">40</span> is 102334155
</span><span class='line'>Execution <span class="nb">time</span>: <span class="m">750</span> ms
</span></code></pre></td></tr></table></div></figure>


<a name="Benchmarking-with-GraalVM"></a>
<h4>Benchmarking with GraalVM</h4>

<p>Compile and run the application using GraalVM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Compile using GraalVM</span>
</span><span class='line'>javac Fibonacci.java
</span><span class='line'>
</span><span class='line'><span class="c"># Run with GraalVM</span>
</span><span class='line'>java -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler Fibonacci
</span></code></pre></td></tr></table></div></figure>


<p><strong>Output:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Fibonacci number at position <span class="m">40</span> is 102334155
</span><span class='line'>Execution <span class="nb">time</span>: <span class="m">550</span> ms
</span></code></pre></td></tr></table></div></figure>


<a name="Native-Image-Compilation-with-GraalVM"></a>
<h3>Native Image Compilation with GraalVM</h3>

<p>For even faster startup time and reduced memory usage, compile the application to a native image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Install Native Image tool</span>
</span><span class='line'>gu install native-image
</span><span class='line'>
</span><span class='line'><span class="c"># Compile to native image</span>
</span><span class='line'>native-image --no-fallback -o fibonacci Fibonacci
</span><span class='line'>
</span><span class='line'><span class="c"># Run the native image</span>
</span><span class='line'>./fibonacci
</span></code></pre></td></tr></table></div></figure>


<p><strong>Output:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Fibonacci number at position <span class="m">40</span> is 102334155
</span><span class='line'>Execution <span class="nb">time</span>: <span class="m">20</span> ms
</span></code></pre></td></tr></table></div></figure>


<a name="Detailed-Metrics"></a>
<h3>Detailed Metrics</h3>

<p>To get precise metrics, multiple runs and averaging can provide more accurate results. Here’s a more structured approach to measuring performance:</p>

<a name="L1.-Execution-Time"></a>
<h4>1. Execution Time</h4>

<p>Run each setup multiple times (e.g., 10 times) and take the average execution time.</p>

<a name="L2.-Memory-Usage"></a>
<h4>2. Memory Usage</h4>

<p>Use profiling tools like <code>jvisualvm</code> for JVMs and <code>time</code> or <code>top</code> for native images to measure memory usage.</p>

<a name="Example-Script-for-Multiple-Runs"></a>
<h3>Example Script for Multiple Runs</h3>

<p>Here is a simple shell script to automate multiple runs and average the execution time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">runs</span><span class="o">=</span>10
</span><span class='line'><span class="nv">total_time</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span> i&lt;<span class="o">=</span>runs<span class="p">;</span> i++<span class="o">))</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="nv">start_time</span><span class="o">=</span><span class="k">$(</span>date +%s%N <span class="p">|</span> cut -b1-13<span class="k">)</span>
</span><span class='line'>  java Fibonacci &gt; /dev/null
</span><span class='line'>  <span class="nv">end_time</span><span class="o">=</span><span class="k">$(</span>date +%s%N <span class="p">|</span> cut -b1-13<span class="k">)</span>
</span><span class='line'>  <span class="nv">exec_time</span><span class="o">=</span><span class="k">$((</span>end_time <span class="o">-</span> start_time<span class="k">))</span>
</span><span class='line'>  <span class="nv">total_time</span><span class="o">=</span><span class="k">$((</span>total_time <span class="o">+</span> exec_time<span class="k">))</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Run $i: $exec_time ms&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nv">avg_time</span><span class="o">=</span><span class="k">$((</span>total_time <span class="o">/</span> runs<span class="k">))</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Average execution time: $avg_time ms&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Benchmark Summary</strong>:</p>

<table>
<thead>
<tr>
<th> Environment            </th>
<th> Average Execution Time (ms) </th>
<th> Memory Usage (MB) </th>
</tr>
</thead>
<tbody>
<tr>
<td> OpenJDK (HotSpot)      </td>
<td> 750                         </td>
<td> 120               </td>
</tr>
<tr>
<td> GraalVM JIT            </td>
<td> 550                         </td>
<td> 110               </td>
</tr>
<tr>
<td> GraalVM Native Image   </td>
<td> 20                          </td>
<td> 50                </td>
</tr>
</tbody>
</table>


<p><br/>
<strong>Takeaways</strong>:</p>

<ul>
<li><strong>GraalVM JIT</strong>: Offers noticeable performance improvements over the standard JVM due to advanced JIT compilation techniques.</li>
<li><strong>GraalVM Native Image</strong>: Provides exceptional startup times and reduced memory usage by precompiling the application to a native executable.</li>
</ul>


<a name="Advanced-Mechanics-of-GraalVM"></a>
<h3>Advanced Mechanics of GraalVM</h3>

<a name="Just-2d-In-2d-Time-Compilation"></a>
<h4>Just-In-Time Compilation</h4>

<p>GraalVM&rsquo;s JIT compiler optimizes code dynamically at runtime. It performs speculative optimizations based on the current execution context and profile data. For example, if a method is frequently called with a certain set of argument types, the JIT compiler can optimize that method specifically for those types.</p>

<a name="Ahead-2d-of-2d-Time-Compilation"></a>
<h4>Ahead-of-Time Compilation</h4>

<p>The Native Image tool performs AOT compilation, which translates bytecode into machine code before execution. This eliminates the need for JIT compilation at runtime, leading to faster startup times and lower memory usage. AOT-compiled binaries include only the necessary parts of the runtime and application code, resulting in smaller and more efficient executables.</p>

<a name="Truffle-Framework"></a>
<h4>Truffle Framework</h4>

<p>The Truffle framework allows for the creation of highly optimized language runtimes. Languages implemented on Truffle can be executed with GraalVM&rsquo;s JIT compiler, benefiting from its advanced optimization techniques. Truffle interpreters generate an intermediate representation (IR) of the code, which the GraalVM compiler can optimize aggressively.</p>

<a name="Partial-Escape-Analysis"></a>
<h4>Partial Escape Analysis</h4>

<p>Partial escape analysis is used to determine if objects can be allocated on the stack instead of the heap. If an object does not escape the scope of a method, it can be allocated on the stack, reducing heap allocations and garbage collection pressure. This technique improves both performance and memory efficiency.</p>

<a name="Conclusion"></a>
<h3>Conclusion</h3>

<p>GraalVM offers substantial performance benefits through its advanced JIT compiler, AOT compilation capabilities, and support for multiple programming languages. By leveraging these features, developers can achieve faster execution times, reduced startup times, and improved memory efficiency. GraalVM&rsquo;s advanced mechanics, such as speculative optimizations and partial escape analysis, further contribute to its performance advantages, making it an excellent choice for high-performance applications.</p>

<p>GraalVM&rsquo;s ability to integrate and optimize code from various languages in a single runtime provides additional flexibility and performance benefits, making it a powerful tool for modern software development.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Exploring Quarkus Performance]]></title>
        <link href="https://rishijeet.github.io/blog/exploring-quarkus-performance/"/>
        <updated>2024-07-31T10:00:32+05:30</updated>
        <id>https://rishijeet.github.io/blog/exploring-quarkus-performance</id>
        <content type="html"><![CDATA[<p>Quarkus is an open-source Kubernetes-native Java framework tailored for GraalVM and OpenJDK HotSpot. It is designed to optimize Java specifically for containers, making it an ideal platform for serverless, cloud-native, and microservices environments. In this blog, we will delve into the performance benefits of Quarkus, backed by metrics and code snippets to illustrate its capabilities.</p>

<a name="Why-Quarkus-3f-"></a>
<h2>Why Quarkus?</h2>

<p>Quarkus brings a host of performance improvements to Java applications, including:</p>

<ul>
<li><strong>Faster Startup Times</strong>: Quarkus significantly reduces startup times, which is critical for scaling microservices
in cloud environments.</li>
<li><strong>Lower Memory Footprint</strong>: It reduces the memory consumption of applications, enabling more efficient use of
resources.</li>
<li><strong>GraalVM Native Image</strong>: Quarkus can compile Java applications into native executables, further enhancing startup
times and reducing memory usage.</li>
</ul>


<a name="Performance-Metrics"></a>
<h2>Performance Metrics</h2>

<p>To demonstrate the performance of Quarkus, we’ll compare a simple REST API application built with Quarkus against a similar application built with a traditional Java framework.</p>

<a name="Environment-Setup"></a>
<h4>Environment Setup</h4>

<ul>
<li><strong>CPU</strong>: Intel i7-9700K</li>
<li><strong>Memory</strong>: 32GB DDR4</li>
<li><strong>JDK</strong>: OpenJDK 11</li>
<li><strong>Quarkus Version</strong>: 2.0.0.Final</li>
</ul>


<!--more-->


<a name="Metrics"></a>
<h4>Metrics</h4>

<ul>
<li><strong>Startup Time</strong></li>
<li><strong>Memory Usage</strong></li>
<li><strong>Response Time Under Load</strong></li>
</ul>


<a name="Benchmark-Results"></a>
<h4>Benchmark Results</h4>

<table>
<thead>
<tr>
<th> Metric                 </th>
<th style="text-align:center;">      Traditional <br/>Java Framework      </th>
<th style="text-align:center;">  Quarkus (JVM)  </th>
<th style="text-align:center;">  Quarkus (Native)  </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>Startup Time</strong>       </td>
<td style="text-align:center;">                3.2 seconds                </td>
<td style="text-align:center;">   0.8 seconds   </td>
<td style="text-align:center;">   0.015 seconds    </td>
</tr>
<tr>
<td> <strong>Memory Usage</strong>       </td>
<td style="text-align:center;">                  300 MB                   </td>
<td style="text-align:center;">     120 MB      </td>
<td style="text-align:center;">       35 MB        </td>
</tr>
<tr>
<td> <strong>Response Time (p99)</strong></td>
<td style="text-align:center;">                   45 ms                   </td>
<td style="text-align:center;">      25 ms      </td>
<td style="text-align:center;">       20 ms        </td>
</tr>
</tbody>
</table>


<p><br/></p>

<p>As evident from the table, Quarkus, particularly in its native form, offers substantial improvements in startup time and memory usage, with comparable or better response times under load.</p>

<a name="Let-27-s-dive-with-the-code"></a>
<h2>Let&rsquo;s dive with the code</h2>

<p>We will create a simple REST API using Quarkus to demonstrate its performance.</p>

<a name="Setting-Up-the-Project"></a>
<h3>Setting Up the Project</h3>

<p>You can set up a Quarkus project using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn io.quarkus:quarkus-maven-plugin:2.0.0.Final:create <span class="se">\</span>
</span><span class='line'>    -DprojectGroupId<span class="o">=</span>com.example <span class="se">\</span>
</span><span class='line'>    -DprojectArtifactId<span class="o">=</span>quarkus-performance <span class="se">\</span>
</span><span class='line'>    -DclassName<span class="o">=</span><span class="s2">&quot;com.example.GreetingResource&quot;</span> <span class="se">\</span>
</span><span class='line'>    -Dpath<span class="o">=</span><span class="s2">&quot;/hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Writing-the-REST-Endpoint"></a>
<h3>Writing the REST Endpoint</h3>

<p>In <code>src/main/java/com/example/GreetingResource.java</code>, implement the REST endpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.ws.rs.GET</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.ws.rs.Path</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.ws.rs.Produces</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.ws.rs.core.MediaType</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreetingResource</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span>
</span><span class='line'>    <span class="nd">@Produces</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">TEXT_PLAIN</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello, Quarkus!&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Building-and-Running-the-Application"></a>
<h3>Building and Running the Application</h3>

<p>To run the application in JVM mode, use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./mvnw quarkus:dev
</span></code></pre></td></tr></table></div></figure>


<p>To build a native executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./mvnw package -Pnative
</span><span class='line'>./target/quarkus-performance-1.0.0-SNAPSHOT-runner
</span></code></pre></td></tr></table></div></figure>


<a name="Testing-Performance"></a>
<h3>Testing Performance</h3>

<p>We can use tools like <code>wrk</code> or <code>Apache JMeter</code> to test the performance of our Quarkus application.</p>

<a name="Example--3c-code-3e-wrk-3c--2f-code-3e--Command:"></a>
<h4>Example <code>wrk</code> Command:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wrk -t12 -c400 -d30s http://localhost:8080/hello
</span></code></pre></td></tr></table></div></figure>


<a name="Performance-Observations"></a>
<h3>Performance Observations</h3>

<ul>
<li><strong>Startup Time</strong>: The native executable starts almost instantaneously, making it ideal for serverless deployments where cold starts can be a concern.</li>
<li><strong>Memory Usage</strong>: The native image consumes significantly less memory compared to running on the JVM.</li>
<li><strong>Response Time</strong>: Under load, Quarkus exhibits stable and low response times, indicating efficient request handling.</li>
</ul>


<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Quarkus delivers impressive performance improvements, particularly in terms of startup time and memory consumption. These benefits make it an excellent choice for building modern, cloud-native applications. By leveraging Quarkus, developers can create highly efficient, scalable microservices with minimal resource overhead.</p>

<p>Quarkus is a game-changer in the Java ecosystem, providing a compelling option for developers looking to optimize their applications for the cloud. Whether you&rsquo;re building microservices, serverless functions, or traditional web applications, Quarkus can help you achieve better performance and lower operational costs.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[A Shift from DevOps to DevEx: Shaping the Future of Technology]]></title>
        <link href="https://rishijeet.github.io/blog/a-shift-from-devops-to-devex-shaping-the-future-of-technology/"/>
        <updated>2024-07-16T10:14:26+05:30</updated>
        <id>https://rishijeet.github.io/blog/a-shift-from-devops-to-devex-shaping-the-future-of-technology</id>
        <content type="html"><![CDATA[<p>DevOps has transformed the software development lifecycle by integrating development and operations, fostering collaboration, and automating processes to enhance efficiency. However, as technology evolves, there is a growing focus on Developer Experience (DevEx), which aims to optimize the overall experience of developers. This shift promises not only enhanced productivity but also greater innovation and job satisfaction.</p>

<a name="Understanding-DevEx"></a>
<h4>Understanding DevEx</h4>

<p>DevEx encompasses all aspects of a developer’s interaction with tools, systems, and processes. It aims to create an environment where developers can focus on coding and innovation rather than dealing with cumbersome processes and tools.</p>

<a name="Key-Metrics-and-Data"></a>
<h4>Key Metrics and Data</h4>

<ul>
<li><p><strong>Developer Productivity</strong>:</p>

<ul>
<li>According to a survey by Stripe, developers spend more than 17 hours per week on maintenance tasks, with only 13
hours spent on actual development.</li>
<li>Improving DevEx can shift this balance, potentially adding $300 billion to global GDP over the next ten years.</li>
</ul>
</li>
<li><p><strong>Time to Market</strong>:</p>

<ul>
<li>Companies with a strong focus on DevEx have reported a 60% reduction in time to market for new features and products.</li>
<li>Accelerating the development process while maintaining high quality can provide a competitive edge.</li>
</ul>
</li>
<li><p><strong>Developer Satisfaction and Retention</strong>:</p>

<ul>
<li>A Stack Overflow survey found that 58% of developers prioritize job satisfaction over salary.</li>
<li>Enhancing DevEx can significantly improve job satisfaction, reducing turnover rates and associated hiring costs.</li>
</ul>
</li>
<li><p><strong>Collaboration and Innovation</strong>:</p>

<ul>
<li>Google’s State of DevOps report highlights that high-performing teams with a focus on DevEx are 1.5 times more
likely to recommend their organizations as a great place to work.</li>
<li>Improved collaboration tools and processes lead to more innovative solutions and higher quality software.</li>
</ul>
</li>
</ul>


<p><img src="https://rishijeet.github.io/images/2024/devex_met.webp" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<!--more-->


<a name="Elements-of-a-Strong-DevEx"></a>
<h4>Elements of a Strong DevEx</h4>

<ul>
<li><p><strong>Tooling and Infrastructure</strong>:</p>

<ul>
<li>Providing developers with modern, efficient tools and a robust infrastructure reduces friction and enhances productivity.</li>
<li>Cloud-native solutions and integrated development environments (IDEs) that streamline workflows are essential.</li>
</ul>
</li>
<li><p><strong>Automation</strong>:</p>

<ul>
<li>Automating repetitive tasks such as testing, deployment, and monitoring allows developers to focus on innovation.</li>
<li>Continuous Integration/Continuous Deployment (CI/CD) pipelines are critical components of DevEx.</li>
</ul>
</li>
<li><p><strong>Documentation and Support</strong>:</p>

<ul>
<li>Comprehensive and accessible documentation is vital for developers to quickly understand and utilize tools and systems.</li>
<li>Support systems, including peer support and dedicated help desks, are also important.</li>
</ul>
</li>
<li><p><strong>Feedback Loops</strong>:</p>

<ul>
<li>Rapid feedback on code changes and deployments helps developers iterate quickly and improve software quality.</li>
<li>Tools that provide real-time insights into performance and user feedback are valuable.</li>
</ul>
</li>
</ul>


<p><img src="https://rishijeet.github.io/images/2024/devex.avif" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Adoption-and-Future-Prospects"></a>
<h4>Adoption and Future Prospects</h4>

<ul>
<li><p><strong>Case Studies</strong>:</p>

<ul>
<li><strong>Netflix</strong>: By prioritizing DevEx, Netflix has created a culture of innovation, allowing it to rapidly deploy new features and maintain high availability.</li>
<li><strong>Spotify</strong>: Spotify’s focus on DevEx through autonomous squads and tribes has enabled it to scale rapidly while maintaining agility and developer satisfaction.</li>
</ul>
</li>
<li><p><strong>Industry Trends</strong>:</p>

<ul>
<li>The rise of platform engineering is a testament to the growing importance of DevEx, with dedicated teams building and maintaining internal developer platforms.</li>
<li>The adoption of low-code and no-code solutions is another trend aimed at enhancing DevEx by enabling faster prototyping and development.</li>
</ul>
</li>
<li><p><strong>The Role of AI and ML</strong>:</p>

<ul>
<li>Artificial Intelligence (AI) and Machine Learning (ML) are playing a significant role in improving DevEx by automating complex tasks and providing intelligent insights.</li>
<li>Tools like GitHub Copilot, which offers AI-powered code suggestions, exemplify the future direction of enhancing DevEx.</li>
</ul>
</li>
<li><p><strong>Community and Open Source</strong>:</p>

<ul>
<li>The open-source community is crucial in driving DevEx improvements, with developers contributing to and benefiting from shared tools and practices.</li>
<li>Companies are increasingly participating in and supporting open-source projects to foster innovation and improve DevEx.</li>
</ul>
</li>
</ul>


<a name="Conclusion"></a>
<h4>Conclusion</h4>

<p>The shift from DevOps to DevEx represents a natural evolution in the pursuit of efficiency, innovation, and satisfaction in the software development lifecycle. By focusing on the holistic experience of developers, organizations can unlock new levels of productivity and creativity, shaping the future of technology. As tools, processes, and cultures continue to evolve, the emphasis on DevEx will become a cornerstone of successful, innovative technology organizations.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[The Role of GPUs in Large Language Models (LLMs): Types, Requirements & Costs]]></title>
        <link href="https://rishijeet.github.io/blog/the-role-of-gpus-in-large-language-models-llms/"/>
        <updated>2024-07-03T10:32:17+05:30</updated>
        <id>https://rishijeet.github.io/blog/the-role-of-gpus-in-large-language-models-llms</id>
        <content type="html"><![CDATA[<p>Large Language Models (LLMs) like GPT-3, BERT, and T5 have revolutionized natural language processing (NLP). However, training and fine-tuning these models require substantial computational resources. Graphics Processing Units (GPUs) are critical in this context, providing the necessary power to handle the vast amounts of data and complex calculations involved. In this blog, we will explore why GPUs are essential for LLMs, the types of GPUs required, and the associated costs.</p>

<p><img src="https://rishijeet.github.io/images/2024/nvidia_a100.jpg" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Why-GPUs-are-Essential-for-LLMs"></a>
<h3>Why GPUs are Essential for LLMs</h3>

<ul>
<li> <strong>Parallel Processing</strong>

<ul>
<li>GPUs excel at parallel processing, allowing them to handle multiple computations simultaneously. This capability is
crucial for training LLMs, which involve large-scale matrix multiplications and operations on high-dimensional tensors.</li>
</ul>
</li>
<li> <strong>High Throughput</strong>

<ul>
<li>GPUs offer high computational throughput, significantly speeding up the training process. This is vital for LLMs,
which require processing vast datasets and performing numerous iterations to achieve optimal performance.</li>
</ul>
</li>
<li> <strong>Memory Bandwidth</strong>

<ul>
<li>Training LLMs involves frequent data transfer between the processor and memory. GPUs provide high memory bandwidth,
facilitating the rapid movement of large amounts of data, which is essential for efficient training.</li>
</ul>
</li>
<li> <strong>Optimized Libraries</strong>

<ul>
<li>Many deep learning frameworks (e.g., TensorFlow, PyTorch) offer GPU-optimized libraries, enabling efficient
implementation of complex neural network operations and reducing training time.</li>
</ul>
</li>
</ul>


<!--more-->


<p><img src="https://rishijeet.github.io/images/2024/nvidia_time_sol.svg" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Types-of-GPUs-Required-for-LLMs"></a>
<h3>Types of GPUs Required for LLMs</h3>

<p>Different LLM tasks have varying computational requirements, and the choice of GPU depends on the model size, dataset size, and specific application. Here are some common GPU types used for LLMs:</p>

<p><strong>NVIDIA A100:</strong></p>

<ul>
<li><strong>Overview:</strong> The NVIDIA A100 is designed for high-performance computing and AI workloads. It is based on the Ampere architecture and offers exceptional performance for training and inference of LLMs.</li>
<li><strong>Key Features:</strong>

<ul>
<li>6912 CUDA cores</li>
<li>40 GB or 80 GB HBM2 memory</li>
<li>Up to 1.6 TB/s memory bandwidth</li>
<li>Multi-instance GPU (MIG) technology for partitioning into smaller, independent GPUs</li>
</ul>
</li>
<li><strong>Cost:</strong> Approximately $10,000 - $15,000 per GPU</li>
</ul>


<p><strong>NVIDIA V100:</strong></p>

<ul>
<li><strong>Overview:</strong> The NVIDIA V100, based on the Volta architecture, is a widely used GPU for deep learning and AI. It
provides excellent performance for training large-scale models.</li>
<li><strong>Key Features:</strong>

<ul>
<li>5120 CUDA cores</li>
<li>16 GB or 32 GB HBM2 memory</li>
<li>Up to 900 GB/s memory bandwidth</li>
<li>Tensor Cores for accelerating matrix operations</li>
</ul>
</li>
<li><strong>Cost:</strong> Approximately $8,000 - $12,000 per GPU</li>
</ul>


<p><strong>NVIDIA T4:</strong></p>

<ul>
<li><strong>Overview:</strong> The NVIDIA T4 is optimized for inference and low-power applications. It offers a good balance of
performance and cost, making it suitable for deploying LLMs.</li>
<li><strong>Key Features:</strong>

<ul>
<li>2560 CUDA cores</li>
<li>16 GB GDDR6 memory</li>
<li>Up to 320 GB/s memory bandwidth</li>
<li>Low power consumption (70W)</li>
</ul>
</li>
<li><strong>Cost:</strong> Approximately $2,000 - $3,000 per GPU</li>
</ul>


<p><strong>NVIDIA RTX 3090:</strong></p>

<ul>
<li><strong>Overview:</strong> The NVIDIA RTX 3090 is a consumer-grade GPU that provides high performance for deep learning tasks.
It is based on the Ampere architecture and is popular among researchers and enthusiasts.</li>
<li><strong>Key Features:</strong>

<ul>
<li>10496 CUDA cores</li>
<li>24 GB GDDR6X memory</li>
<li>Up to 936 GB/s memory bandwidth</li>
</ul>
</li>
<li><strong>Cost:</strong> Approximately $1,500 - $2,500 per GPU</li>
</ul>


<p><img src="https://rishijeet.github.io/images/2024/nvidia_perf.svg" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Cost-Considerations"></a>
<h3>Cost Considerations</h3>

<p>The cost of GPUs varies based on their performance, memory capacity, and features. Here are some factors to consider when budgeting for GPUs in LLM projects:</p>

<p><strong>Performance Needs:</strong></p>

<ul>
<li>Higher-end GPUs like the NVIDIA A100 and V100 are suitable for large-scale training but come at a higher cost.
For smaller tasks or inference, more affordable options like the T4 or RTX 3090 might suffice.</li>
</ul>


<p><strong>Scalability:</strong></p>

<ul>
<li>Consider the scalability of your setup. If you plan to scale up your operations, investing in higher-end GPUs
might provide better long-term value due to their superior performance and efficiency.</li>
</ul>


<p><strong>Cloud vs. On-Premise:</strong></p>

<ul>
<li>Cloud providers (e.g., AWS, Google Cloud, Azure) offer GPU instances, allowing you to pay for usage rather than
upfront costs. This can be cost-effective for short-term projects or when starting.</li>
</ul>


<p><strong>Total Cost of Ownership:</strong></p>

<ul>
<li>Factor in additional costs such as electricity, cooling, and maintenance when running GPUs on-premise. These
operational costs can add up, especially for high-power GPUs.</li>
</ul>


<p>While NVIDIA is the dominant player in the GPU market, there are indeed other companies that produce GPUs. However, NVIDIA&rsquo;s significant presence in the deep learning and AI sectors often overshadows these competitors. Let&rsquo;s explore some of these companies, their offerings, and why they are less frequently discussed in the context of LLMs.</p>

<a name="Other-GPU-Manufacturers"></a>
<h3>Other GPU Manufacturers</h3>

<p><strong>AMD (Advanced Micro Devices):</strong></p>

<ul>
<li><strong>Overview:</strong> AMD is a well-known player in the GPU market, offering both consumer and professional-grade GPUs
under the Radeon and Radeon Pro brands.</li>
<li><strong>Key Products:</strong>

<ul>
<li><strong>Radeon RX Series:</strong> Consumer GPUs aimed at gaming but also used for deep learning tasks.</li>
<li><strong>Radeon Pro Series:</strong> Professional GPUs designed for content creation, CAD, and scientific computing.</li>
</ul>
</li>
<li><strong>Why Less Prominent for LLMs:</strong> AMD GPUs are generally not as optimized for deep learning frameworks as NVIDIA&rsquo;s.
CUDA, NVIDIA&rsquo;s parallel computing platform, is widely supported and has become the industry standard, giving NVIDIA an edge in the AI space.</li>
</ul>


<p><strong>Intel:</strong></p>

<ul>
<li><strong>Overview:</strong> Intel, primarily known for its CPUs, has also ventured into the GPU market with its Xe graphics
architecture.</li>
<li><strong>Key Products:</strong>

<ul>
<li><strong>Intel Iris Xe:</strong> Integrated and discrete GPUs aimed at mainstream computing tasks.</li>
<li><strong>Intel Xeon Phi:</strong> Co-processors designed for high-performance computing tasks, including AI and machine learning.</li>
</ul>
</li>
<li><strong>Why Less Prominent for LLMs:</strong> Intel&rsquo;s GPUs are relatively new entrants to the market and lack the extensive ecosystem and software support that NVIDIA GPUs enjoy. Additionally, Intel&rsquo;s focus has traditionally been on CPUs, making their GPUs less prominent in the AI and deep learning communities.</li>
</ul>


<p><strong>Google (TPUs - Tensor Processing Units):</strong></p>

<ul>
<li><strong>Overview:</strong> Google developed TPUs specifically for accelerating machine learning workloads. These are not
traditional GPUs but are worth mentioning due to their specialized role in AI.</li>
<li><strong>Key Products:</strong>

<ul>
<li><strong>TPU v4:</strong> The latest generation of TPUs, designed for both training and inference of large models.</li>
</ul>
</li>
<li><strong>Why Less Prominent for General Use:</strong> TPUs are primarily available through Google Cloud and are tailored for Google&rsquo;s ecosystem. They are not as widely accessible as NVIDIA GPUs for general-purpose deep learning tasks.</li>
</ul>


<p><strong>Huawei (Ascend):</strong></p>

<ul>
<li><strong>Overview:</strong> Huawei produces AI processors under the Ascend brand, designed for deep learning and AI workloads.</li>
<li><strong>Key Products:</strong>

<ul>
<li><strong>Ascend 910:</strong> A high-performance AI processor aimed at training large models.</li>
</ul>
</li>
<li><strong>Why Less Prominent:</strong> Huawei&rsquo;s market presence is more regional, and their products are not as widely adopted globally compared to NVIDIA&rsquo;s offerings.</li>
</ul>


<a name="Why-NVIDIA-Dominates-the-LLM-Space"></a>
<h3>Why NVIDIA Dominates the LLM Space</h3>

<p><strong>CUDA Ecosystem:</strong></p>

<ul>
<li><strong>Software Support:</strong> CUDA has become the de facto standard for parallel computing in deep learning. Most deep
learning frameworks, such as TensorFlow and PyTorch, are highly optimized for CUDA.</li>
<li><strong>Libraries and Tools:</strong> NVIDIA provides a rich set of libraries (cuDNN, NCCL, TensorRT) and tools that simplify the development and deployment of deep learning models.</li>
</ul>


<p><strong>Performance:</strong></p>

<ul>
<li><strong>Specialized Hardware:</strong> NVIDIA&rsquo;s GPUs are equipped with Tensor Cores specifically designed for accelerating
deep learning tasks, providing superior performance for training large models.</li>
<li><strong>Scalability:</strong> NVIDIA&rsquo;s NVLink and multi-GPU setups enable efficient scaling of deep learning workloads, essential for training LLMs.</li>
</ul>


<p><strong>Industry Adoption:</strong></p>

<ul>
<li><strong>Research and Development:</strong> Many leading research institutions and tech companies use NVIDIA GPUs, resulting in
a wealth of community knowledge, tutorials, and research papers centered around NVIDIA hardware.</li>
<li><strong>Cloud Integration:</strong> Major cloud providers (AWS, Google Cloud, Azure) offer extensive support for NVIDIA GPUs, making them accessible for scalable deep learning applications.</li>
</ul>


<a name="Conclusion"></a>
<h3>Conclusion</h3>

<p>GPUs are indispensable for training and fine-tuning Large Language Models due to their parallel processing capabilities, high throughput, and optimized performance for deep learning tasks. Selecting the right GPU involves balancing performance needs, budget constraints, and scalability requirements. High-end GPUs like the NVIDIA A100 and V100 are ideal for large-scale training, while more affordable options like the T4 and RTX 3090 are suitable for smaller tasks and inference.</p>

<p>By understanding the different types of GPUs and their costs, you can make informed decisions that align with your LLM project goals, ensuring efficient and cost-effective model development and deployment.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Understanding Types of Large Language Models (LLMs)]]></title>
        <link href="https://rishijeet.github.io/blog/understanding-types-of-large-language-models-llms/"/>
        <updated>2024-07-03T10:13:27+05:30</updated>
        <id>https://rishijeet.github.io/blog/understanding-types-of-large-language-models-llms</id>
        <content type="html"><![CDATA[<p>Large Language Models (LLMs) have revolutionized the field of natural language processing (NLP) with their ability to understand, generate, and interact with human language. These models are built using deep learning techniques and have been trained on vast amounts of text data. In this blog, we will explore the different types of LLMs, their architectures, and their applications.</p>

<a name="L-3c-strong-3e-Generative-Pre-2d-trained-Transformers--28-GPT-29--3c--2f-strong-3e-"></a>
<h3><strong>Generative Pre-trained Transformers (GPT)</strong></h3>

<a name="Overview"></a>
<h4>Overview</h4>

<p>GPT models, developed by OpenAI, are among the most popular LLMs. They use a transformer-based architecture and are designed to generate human-like text. The models are pre-trained on a large corpus of text and then fine-tuned for specific tasks.</p>

<p><img src="https://rishijeet.github.io/images/2024/gpt.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Key-Features"></a>
<h4>Key Features</h4>

<ul>
<li><strong>Transformer Architecture:</strong> Utilizes self-attention mechanisms to process input text efficiently.</li>
<li><strong>Pre-training and Fine-tuning:</strong> Initially pre-trained on diverse text data and then fine-tuned for specific tasks like language translation, summarization, and question answering.</li>
<li><strong>Generative Capabilities:</strong> Can generate coherent and contextually relevant text based on a given prompt.</li>
</ul>


<!--more-->


<a name="Applications"></a>
<h4>Applications</h4>

<ul>
<li>Chatbots and virtual assistants</li>
<li>Text completion and generation</li>
<li>Content creation</li>
</ul>


<a name="L-3c-strong-3e-Bidirectional-Encoder-Representations-from-Transformers--28-BERT-29--3c--2f-strong-3e-"></a>
<h3><strong>Bidirectional Encoder Representations from Transformers (BERT)</strong></h3>

<a name="Overview"></a>
<h4>Overview</h4>

<p>BERT, developed by Google, is designed for understanding the context of words in a sentence. Unlike GPT, which generates text, BERT excels at tasks requiring a deep understanding of text, such as question answering and sentiment analysis.</p>

<p><img src="https://rishijeet.github.io/images/2024/bert.jpg" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Key-Features"></a>
<h4>Key Features</h4>

<ul>
<li><strong>Bidirectional Training:</strong> BERT reads text in both directions (left-to-right and right-to-left) to capture context more effectively.</li>
<li><strong>Masked Language Modeling (MLM):</strong> Trained by predicting masked words in a sentence, enabling it to understand the context of each word.</li>
<li><strong>Next Sentence Prediction (NSP):</strong> Helps the model understand the relationship between sentences.</li>
</ul>


<a name="Applications"></a>
<h4>Applications</h4>

<ul>
<li>Question answering systems</li>
<li>Sentiment analysis</li>
<li>Text classification</li>
</ul>


<a name="L-3c-strong-3e-T5--28-Text-2d-to-2d-Text-Transfer-Transformer-29--3c--2f-strong-3e-"></a>
<h3><strong>T5 (Text-to-Text Transfer Transformer)</strong></h3>

<a name="Overview"></a>
<h4>Overview</h4>

<p>T5, also developed by Google, treats every NLP task as a text-to-text problem. This means both the input and the output are text strings, making it highly versatile for various tasks.</p>

<p><img src="https://rishijeet.github.io/images/2024/t5.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Key-Features"></a>
<h4>Key Features</h4>

<ul>
<li><strong>Unified Framework:</strong> Simplifies the model by converting all tasks into a text-to-text format.</li>
<li><strong>Pre-training on Diverse Tasks:</strong> Pre-trained on a mixture of unsupervised and supervised tasks, enabling it to generalize well.</li>
<li><strong>Flexibility:</strong> Can be fine-tuned for a wide range of tasks such as translation, summarization, and classification.</li>
</ul>


<a name="Applications"></a>
<h4>Applications</h4>

<ul>
<li>Machine translation</li>
<li>Text summarization</li>
<li>Sentence paraphrasing</li>
</ul>


<a name="L-3c-strong-3e-XLNet-3c--2f-strong-3e-"></a>
<h3><strong>XLNet</strong></h3>

<a name="Overview"></a>
<h4>Overview</h4>

<p>XLNet, developed by Google and Carnegie Mellon University, aims to improve upon BERT by addressing its limitations. It uses a permutation-based training method to capture bidirectional context without masking.</p>

<p><img src="https://rishijeet.github.io/images/2024/xlnet.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Key-Features"></a>
<h4>Key Features</h4>

<ul>
<li><strong>Permutation Language Modeling:</strong> Instead of masking, XLNet predicts all tokens in a sentence in random order, preserving context for each word.</li>
<li><strong>Autoregressive Method:</strong> Combines the strengths of autoregressive models (like GPT) with bidirectional context.</li>
<li><strong>Improved Performance:</strong> Outperforms BERT on several NLP benchmarks.</li>
</ul>


<a name="Applications"></a>
<h4>Applications</h4>

<ul>
<li>Reading comprehension</li>
<li>Text classification</li>
<li>Sentence completion</li>
</ul>


<a name="L-3c-strong-3e-Robustly-Optimized-BERT-Pretraining-Approach--28-RoBERTa-29--3c--2f-strong-3e-"></a>
<h3><strong>Robustly Optimized BERT Pretraining Approach (RoBERTa)</strong></h3>

<a name="Overview"></a>
<h4>Overview</h4>

<p>RoBERTa, developed by Facebook AI, is an optimized version of BERT. It focuses on improving BERT&rsquo;s performance by making changes to the training procedure.</p>

<p><img src="https://rishijeet.github.io/images/2024/roberta.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<a name="Key-Features"></a>
<h4>Key Features</h4>

<ul>
<li><strong>Larger Training Data:</strong> Trained on more data and for longer periods compared to BERT.</li>
<li><strong>Dynamic Masking:</strong> Uses a different masking pattern for each epoch during training.</li>
<li><strong>No NSP Task:</strong> Removes the next sentence prediction task, focusing solely on masked language modeling.</li>
</ul>


<a name="Applications"></a>
<h4>Applications</h4>

<ul>
<li>Sentiment analysis</li>
<li>Named entity recognition</li>
<li>Text classification</li>
</ul>


<a name="Conclusion"></a>
<h3>Conclusion</h3>

<p>Large Language Models have significantly advanced the field of NLP, offering powerful tools for understanding and generating human language. Each type of LLM has its strengths and is suited for different applications. As these models continue to evolve, they promise to unlock new possibilities in various domains, from enhancing virtual assistants to enabling more sophisticated language understanding systems.</p>

<p>Understanding the differences between these models helps in selecting the right tool for specific tasks and leveraging their full potential. Whether it&rsquo;s the generative prowess of GPT, the contextual understanding of BERT, or the versatility of T5, LLMs are reshaping how we interact with and utilize language in the digital age.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Advanced Apache Kafka Anatomy: Delving Deep into the Core Components]]></title>
        <link href="https://rishijeet.github.io/blog/advanced-apache-kafka-anatomy-delving-deep-into-the-core-components/"/>
        <updated>2024-06-27T09:55:12+05:30</updated>
        <id>https://rishijeet.github.io/blog/advanced-apache-kafka-anatomy-delving-deep-into-the-core-components</id>
        <content type="html"><![CDATA[<p>Apache Kafka has become a cornerstone of modern data architectures, renowned for its ability to handle high-throughput, low-latency data streams. While its fundamental concepts are widely understood, a deeper dive into Kafka’s advanced components and features reveals the true power and flexibility of this distributed event streaming platform. This blog aims to unravel the advanced anatomy of Apache Kafka, offering insights into its core components, configurations, and best practices for optimizing performance.</p>

<a name="Core-Components-of-Kafka"></a>
<h2>Core Components of Kafka</h2>

<a name="Brokers"></a>
<h3>Brokers</h3>

<p><strong>Brokers</strong> are the backbone of a Kafka cluster, responsible for managing data storage, processing requests from clients, and replicating data to ensure fault tolerance.</p>

<p><img src="https://rishijeet.github.io/images/2024/kafka_broker.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<ul>
<li><strong>Leader and Follower Roles</strong>: Each topic partition has a leader broker that handles all read and write requests for that partition, while follower brokers replicate the leader’s data to ensure high availability.</li>
<li><strong>Scalability</strong>: Kafka’s design allows for easy scaling by adding more brokers to distribute the load and improve throughput.</li>
</ul>


<a name="Topics-and-Partitions"></a>
<h3>Topics and Partitions</h3>

<p><strong>Topics</strong> are categories to which records are published. Each topic can be divided into multiple partitions, which are the basic unit of parallelism and scalability in Kafka.</p>

<ul>
<li><strong>Partitioning Strategy</strong>: Proper partitioning is crucial for load balancing and ensuring efficient data distribution across the cluster. Common strategies include key-based partitioning and round-robin distribution.</li>
<li><strong>Replication</strong>: Partitions can be replicated across multiple brokers to provide redundancy and high availability. The replication factor determines the number of copies of a partition in the cluster.</li>
</ul>


<!--more-->


<a name="Producers"></a>
<h3>Producers</h3>

<p><strong>Producers</strong> are responsible for publishing records to Kafka topics.</p>

<p><img src="https://rishijeet.github.io/images/2024/kafka_producers.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<ul>
<li><strong>Acknowledgments</strong>: Configurable acknowledgment settings (<code>acks</code>) determine how many broker acknowledgments the producer requires before considering a request complete (<code>acks=0</code>, <code>acks=1</code>, or <code>acks=all</code>).</li>
<li><strong>Batching and Compression</strong>: Producers can batch multiple records into a single request to improve throughput and enable data compression to reduce the size of the data being transferred.</li>
</ul>


<a name="Consumers"></a>
<h3>Consumers</h3>

<p><strong>Consumers</strong> subscribe to topics and process the records published to them.</p>

<ul>
<li><strong>Consumer Groups</strong>: Consumers operate as part of a group, where each consumer in a group reads from a unique set of partitions. This allows for parallel processing and ensures that records are processed by a single consumer.</li>
<li><strong>Offset Management</strong>: Consumers track their position in each partition by maintaining offsets, which can be automatically committed at intervals or manually managed for precise control over record processing.</li>
</ul>


<a name="ZooKeeper"></a>
<h3>ZooKeeper</h3>

<p><strong>ZooKeeper</strong> is a critical component in Kafka&rsquo;s ecosystem, used for cluster coordination and configuration management.</p>

<ul>
<li><strong>Leader Election</strong>: ZooKeeper helps manage the leader election process for partition leaders and the Kafka controller.</li>
<li><strong>Metadata Storage</strong>: Stores metadata about the Kafka cluster, including broker information, topic configurations, and access control lists.</li>
</ul>


<a name="Advanced-Kafka-Features"></a>
<h2>Advanced Kafka Features</h2>

<a name="Kafka-Connect"></a>
<h3>Kafka Connect</h3>

<p><strong>Kafka Connect</strong> is a robust framework for integrating Kafka with external systems.</p>

<p><img src="https://rishijeet.github.io/images/2024/kafka_connect.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<ul>
<li><strong>Source Connectors</strong>: Import data from external systems (e.g., databases, file systems) into Kafka topics.</li>
<li><strong>Sink Connectors</strong>: Export data from Kafka topics to external systems (e.g., databases, data lakes).</li>
</ul>


<a name="Kafka-Streams"></a>
<h3>Kafka Streams</h3>

<p><strong>Kafka Streams</strong> is a powerful library for building stream processing applications on top of Kafka.</p>

<p><img src="https://rishijeet.github.io/images/2024/kafka_streams.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<ul>
<li><strong>KStream and KTable</strong>: Core abstractions for modeling streams of records and tables of changelog records, respectively.</li>
<li><strong>Stateful Processing</strong>: Enables operations like joins, aggregations, and windowing, with support for local state stores and fault-tolerant state management.</li>
</ul>


<a name="Schema-Registry"></a>
<h3>Schema Registry</h3>

<p><strong>Schema Registry</strong> is a centralized service for managing and validating schemas used by Kafka producers and consumers.</p>

<p><img src="https://rishijeet.github.io/images/2024/schema-registry-and-kafka.png" height="300" width="900" alt="Alt text" /><em>Source: Internet</em></p>

<ul>
<li><strong>Avro, JSON, and Protobuf</strong>: Supports multiple schema formats, ensuring data consistency and compatibility across different applications.</li>
<li><strong>Schema Evolution</strong>: Facilitates schema versioning and evolution, allowing for backward and forward compatibility.</li>
</ul>


<a name="Best-Practices-for-Kafka-Performance-Optimization"></a>
<h2>Best Practices for Kafka Performance Optimization</h2>

<a name="Configuring-Brokers"></a>
<h3>Configuring Brokers</h3>

<ul>
<li><strong>Heap Size</strong>: Set an appropriate heap size for Kafka brokers to prevent memory issues. Typically, 4-8 GB is recommended.</li>
<li><strong>Log Retention</strong>: Configure log retention policies (<code>log.retention.hours</code>, <code>log.retention.bytes</code>) to manage disk usage and comply with data retention requirements.</li>
</ul>


<a name="Optimizing-Producers"></a>
<h3>Optimizing Producers</h3>

<ul>
<li><strong>Batch Size and Linger</strong>: Adjust <code>batch.size</code> and <code>linger.ms</code> to balance latency and throughput. Larger batch sizes and longer linger times can improve throughput at the cost of increased latency.</li>
<li><strong>Compression Type</strong>: Enable compression (<code>compression.type</code>) to reduce network bandwidth usage. Common options include <code>gzip</code>, <code>snappy</code>, and <code>lz4</code>.</li>
</ul>


<a name="Tuning-Consumers"></a>
<h3>Tuning Consumers</h3>

<ul>
<li><strong>Fetch Size</strong>: Configure <code>fetch.min.bytes</code> and <code>fetch.max.wait.ms</code> to control the amount of data fetched in each request and the maximum wait time, balancing latency and throughput.</li>
<li><strong>Offset Commit Frequency</strong>: Adjust <code>auto.commit.interval.ms</code> for automatic offset commits or implement manual offset management for finer control over record processing.</li>
</ul>


<a name="Ensuring-High-Availability"></a>
<h3>Ensuring High Availability</h3>

<ul>
<li><strong>Replication Factor</strong>: Set an appropriate replication factor for topics to ensure data redundancy and fault tolerance. A replication factor of 3 is common in production environments.</li>
<li><strong>ISR (In-Sync Replicas)</strong>: Monitor the number of in-sync replicas (<code>min.insync.replicas</code>) to ensure that there are enough replicas to maintain data consistency and durability.</li>
</ul>


<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Apache Kafka’s advanced anatomy reveals a powerful and flexible system capable of handling the most demanding data streaming requirements. By understanding its core components, leveraging advanced features like Kafka Connect and Kafka Streams, and adhering to best practices for performance optimization, you can harness the full potential of Kafka in your data architecture. Whether you’re building real-time analytics, event-driven microservices, or data integration pipelines, Kafka provides the foundation for scalable, resilient, and high-performance data streaming solutions.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Exploring gRPC: The Next Generation of Remote Procedure Calls]]></title>
        <link href="https://rishijeet.github.io/blog/exploring-grpc-the-next-generation-of-remote-procedure-calls/"/>
        <updated>2024-06-26T09:54:48+05:30</updated>
        <id>https://rishijeet.github.io/blog/exploring-grpc-the-next-generation-of-remote-procedure-calls</id>
        <content type="html"><![CDATA[<p>In the realm of distributed systems and microservices, effective communication between services is paramount. For many years, REST (Representational State Transfer) has been the dominant paradigm for building APIs. However, gRPC (gRPC Remote Procedure Calls) is emerging as a powerful alternative, offering several advantages over traditional REST APIs. In this blog, we&rsquo;ll explore what gRPC is, how it works, and why it might be a better choice than REST for certain applications.</p>

<a name="What-is-gRPC-3f-"></a>
<h2>What is gRPC?</h2>

<p>gRPC, originally developed by Google, is an open-source framework that enables high-performance remote procedure calls (RPC). It leverages HTTP/2 for transport, Protocol Buffers (Protobuf) as the interface definition language (IDL), and provides features like bi-directional streaming, authentication, and load balancing out-of-the-box.</p>

<p><img src="https://rishijeet.github.io/images/2024/grpc.png" height="300" width="900" alt="Alt text" /><em>Source: gRPC</em></p>

<a name="Key-Components-of-gRPC"></a>
<h3>Key Components of gRPC</h3>

<ul>
<li><strong>Protocol Buffers (Protobuf)</strong>: A language-neutral, platform-neutral, extensible mechanism for serializing
structured data. It serves as both the IDL and the message format.</li>
<li><strong>HTTP/2</strong>: The transport protocol used by gRPC, which provides benefits like multiplexing, flow control, header
compression, and low-latency communication.</li>
<li><strong>Stub</strong>: Generated client code that provides the same methods as the server, making remote calls appear as local
method calls.</li>
</ul>


<a name="How-gRPC-Works"></a>
<h3>How gRPC Works</h3>

<ul>
<li><strong>Define the Service</strong>: Use Protobuf to define the service and its methods, along with the request and response
message types.</li>
<li><strong>Generate Code</strong>: Use the Protobuf compiler to generate client and server code in your preferred programming
languages.</li>
<li><strong>Implement the Service</strong>: Write the server-side logic to handle the defined methods.</li>
<li><strong>Call the Service</strong>: Use the generated client code to call the methods on the server as if they were local functions.</li>
</ul>


<!--more-->


<a name="Example-Protobuf-Definition"></a>
<h3>Example Protobuf Definition</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='protobuf'><span class='line'><span class="na">syntax</span> <span class="o">=</span> <span class="s">&quot;proto3&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">service</span> <span class="n">Greeter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">rpc</span> <span class="n">SayHello</span> <span class="p">(</span><span class="n">HelloRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloReply</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">message</span> <span class="nc">HelloRequest</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="na">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">message</span> <span class="nc">HelloReply</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="kd">message</span> <span class="err">= 1;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Why-gRPC-is-Better-Than-REST"></a>
<h2>Why gRPC is Better Than REST</h2>

<a name="Performance"></a>
<h3>Performance</h3>

<ul>
<li><strong>HTTP/2 Benefits</strong>: gRPC uses HTTP/2, which supports multiplexing (multiple requests over a single connection), header compression, and server push, leading to more efficient use of network resources and lower latency compared to HTTP/1.1 used by REST.</li>
<li><strong>Binary Protocol</strong>: Protobuf is a binary format, making it more compact and faster to serialize/deserialize than JSON, which is text-based.</li>
</ul>


<p><img src="https://rishijeet.github.io/images/2024/grpc_rest.png" height="300" width="900" alt="Alt text" /><em>Source: Refine</em></p>

<a name="Strongly-Typed-Contracts"></a>
<h3>Strongly Typed Contracts</h3>

<ul>
<li><strong>Protobuf IDL</strong>: The use of Protobuf enforces a strict contract between the client and server, reducing the chances of runtime errors due to type mismatches and ensuring that APIs are well-documented and versioned.</li>
</ul>


<a name="Bi-2d-Directional-Streaming"></a>
<h3>Bi-Directional Streaming</h3>

<ul>
<li><strong>Streaming Support</strong>: gRPC natively supports various types of streaming:

<ul>
<li><strong>Unary RPC</strong>: Single request, single response.</li>
<li><strong>Server Streaming RPC</strong>: Single request, multiple responses.</li>
<li><strong>Client Streaming RPC</strong>: Multiple requests, single response.</li>
<li><strong>Bi-Directional Streaming RPC</strong>: Multiple requests and responses, allowing for real-time, duplex communication.</li>
</ul>
</li>
</ul>


<a name="Code-Generation"></a>
<h3>Code Generation</h3>

<ul>
<li><strong>Automated Stub Generation</strong>: The Protobuf compiler generates client and server code, reducing boilerplate and ensuring consistency between client and server implementations. This accelerates development and minimizes human error.</li>
</ul>


<a name="Built-2d-In-Features"></a>
<h3>Built-In Features</h3>

<ul>
<li><strong>Authentication and Security</strong>: gRPC supports authentication, load balancing, retries, and more out-of-the-box, providing robust tools for building secure and resilient services.</li>
<li><strong>Interoperability</strong>: gRPC supports multiple languages and platforms, making it easy to integrate with existing systems and ensuring broad compatibility.</li>
</ul>


<a name="Ecosystem-and-Tooling"></a>
<h3>Ecosystem and Tooling</h3>

<ul>
<li><strong>Rich Ecosystem</strong>: gRPC is supported by a wide range of tools and libraries, facilitating monitoring, debugging, and performance tuning. Tools like Envoy Proxy and Istio further enhance its capabilities in microservices environments.</li>
</ul>


<a name="When-to-Use-gRPC"></a>
<h2>When to Use gRPC</h2>

<p>While gRPC offers many advantages, it may not be suitable for every use case. Here are some scenarios where gRPC shines:</p>

<ul>
<li><strong>Low-Latency, High-Throughput Systems</strong>: Applications requiring high performance and efficient network utilization.</li>
<li><strong>Microservices</strong>: Complex systems with many inter-service communications benefit from gRPC&rsquo;s efficiency and robust features.</li>
<li><strong>Real-Time Applications</strong>: Use cases needing bi-directional streaming, such as chat applications, real-time analytics, and IoT systems.</li>
<li><strong>Polyglot Environments</strong>: Systems built using multiple programming languages, leveraging gRPC&rsquo;s cross-language support.</li>
</ul>


<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>gRPC represents a significant evolution in API design and inter-service communication, offering numerous benefits over traditional REST APIs. Its performance advantages, strongly typed contracts, streaming capabilities, and rich ecosystem make it an excellent choice for modern distributed systems and microservices architectures. While REST remains a viable option for many applications, developers should consider gRPC when building performance-critical, scalable, and real-time systems.</p>

<p>By understanding the strengths and appropriate use cases for gRPC, you can make informed decisions about when to adopt this powerful technology in your own projects.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Event-Driven Architecture: Unlocking Modern Application Potential]]></title>
        <link href="https://rishijeet.github.io/blog/event-driven-architecture-unlocking-modern-application-potential/"/>
        <updated>2024-06-26T09:27:40+05:30</updated>
        <id>https://rishijeet.github.io/blog/event-driven-architecture-unlocking-modern-application-potential</id>
        <content type="html"><![CDATA[<p>In today&rsquo;s fast-paced digital landscape, real-time data processing and responsive systems are becoming increasingly crucial. Traditional request-response architectures often struggle to keep up with the demands of modern applications, which require scalable, resilient, and decoupled systems. Enter event-based architecture—a paradigm that addresses these challenges by enabling systems to react to changes and events as they happen.</p>

<p>In this blog, we&rsquo;ll explore the key concepts, benefits, and components of modern event-based architecture, along with practical examples and best practices for implementation.</p>

<a name="What-is-Event-2d-Based-Architecture-3f-"></a>
<h2>What is Event-Based Architecture?</h2>

<p>Event-based architecture is a design pattern in which system components communicate by producing and consuming events. An event is a significant change in state or an occurrence that is meaningful to the system, such as a user action, a data update, or an external trigger. Instead of directly calling methods or services, components publish events to an event bus, and other components subscribe to these events to perform actions in response.</p>

<p><img src="https://rishijeet.github.io/images/2024/glossary-eda.svg" height="300" width="900" alt="Alt text" /><em>Source: Hazelcast</em></p>

<a name="Components-of-Modern-Event-2d-Based-Architecture"></a>
<h2>Components of Modern Event-Based Architecture</h2>

<a name="Event-Producers"></a>
<h3>Event Producers</h3>

<p>Event producers are responsible for generating events. These can be user interfaces, IoT devices, data ingestion services, or any other source that generates meaningful events. Producers publish events to the event bus without needing to know who will consume them.</p>

<a name="Event-Consumers"></a>
<h3>Event Consumers</h3>

<p>Event consumers subscribe to specific events and react to them. Consumers can perform various actions, such as updating databases, triggering workflows, sending notifications, or invoking other services. Each consumer processes events independently, allowing for parallel and asynchronous processing.</p>

<a name="Event-Bus"></a>
<h3>Event Bus</h3>

<p>The event bus is the backbone of an event-based architecture. It routes events from producers to consumers, ensuring reliable and scalable communication. Common implementations of an event bus include message brokers like Apache Kafka, RabbitMQ, and Amazon SNS/SQS.</p>

<a name="Event-Streams-and-Storage"></a>
<h3>Event Streams and Storage</h3>

<p>Event streams are continuous flows of events that can be processed in real-time or stored for batch processing and historical analysis. Stream processing frameworks like Apache Kafka Streams, Apache Flink, and Apache Storm enable real-time processing of event streams.</p>

<a name="Event-Processing-and-Transformation"></a>
<h3>Event Processing and Transformation</h3>

<p>Event processing involves filtering, aggregating, and transforming events to derive meaningful insights and trigger actions. Complex Event Processing (CEP) engines and stream processing frameworks are often used to handle sophisticated event processing requirements.</p>

<!--more-->


<a name="Practical-Example"></a>
<h2>Practical Example</h2>

<p>Let&rsquo;s map the modern event-based architecture to a coffee shop scenario with four key services: Product Service, Counter Service, Barista Service, and Kitchen Service. This analogy will help visualize how event-based systems work in a real-world context.</p>

<p><img src="https://rishijeet.github.io/images/2024/coffeeshop.svg" height="300" width="900" alt="Alt text" /><em>Source: <a href="https://github.com/thangchung/go-coffeeshop">Github</a></em></p>

<a name="Services-in-the-Coffee-Shop"></a>
<h3>Services in the Coffee Shop</h3>

<ul>
<li><strong>Product Service</strong>: Manages the menu and availability of items.</li>
<li><strong>Counter Service</strong>: Handles customer orders and payments.</li>
<li><strong>Barista Service</strong>: Prepares coffee and other beverages.</li>
<li><strong>Kitchen Service</strong>: Prepares food items like pastries and sandwiches.</li>
</ul>


<a name="Event-Flow-in-the-Coffee-Shop"></a>
<h3>Event Flow in the Coffee Shop</h3>

<a name="Customer-Places-an-Order"></a>
<h4>Customer Places an Order</h4>

<ul>
<li><strong>Order Received</strong>: A customer places an order at the counter. The Counter Service generates an &ldquo;OrderPlaced&rdquo; event
containing details of the order.</li>
<li><strong>Inventory Check</strong>: The Product Service subscribes to &ldquo;OrderPlaced&rdquo; events to verify the availability of items. If
an item is out of stock, it can trigger an &ldquo;ItemOutOfStock&rdquo; event to update the menu.</li>
</ul>


<a name="Order-Processing"></a>
<h4>Order Processing</h4>

<ul>
<li><strong>Beverage Preparation</strong>: The Barista Service subscribes to &ldquo;OrderPlaced&rdquo; events to start preparing beverages. Once
a beverage is ready, it generates an &ldquo;BeverageReady&rdquo; event.</li>
<li><strong>Food Preparation</strong>: The Kitchen Service subscribes to &ldquo;OrderPlaced&rdquo; events to start preparing food items. Once a
food item is ready, it generates an &ldquo;FoodReady&rdquo; event.</li>
</ul>


<a name="Customer-Notification"></a>
<h4>Customer Notification</h4>

<ul>
<li><strong>Order Ready Notification</strong>: The Counter Service subscribes to &ldquo;BeverageReady&rdquo; and &ldquo;FoodReady&rdquo; events. When all
items in an order are ready, it generates an &ldquo;OrderReady&rdquo; event and notifies the customer.</li>
</ul>


<a name="Detailed-Event-Flow"></a>
<h3>Detailed Event Flow</h3>

<p><strong>Order Placed</strong>:
    - A customer orders a cappuccino and a sandwich at the counter.
    - The Counter Service generates an &ldquo;OrderPlaced&rdquo; event:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;orderId&quot;</span><span class="p">:</span> <span class="s2">&quot;12345&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;items&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;beverage&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;cappuccino&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;food&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;sandwich&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Inventory Check</strong>:
    - The Product Service receives the &ldquo;OrderPlaced&rdquo; event and checks inventory.
    - If the cappuccino is out of stock, it generates an &ldquo;ItemOutOfStock&rdquo; event.
    - If all items are available, no further action is taken by the Product Service.</p>

<p><strong>Beverage Preparation</strong>:
    - The Barista Service receives the &ldquo;OrderPlaced&rdquo; event and starts preparing the cappuccino.
    - Once the cappuccino is ready, it generates a &ldquo;BeverageReady&rdquo; event:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;orderId&quot;</span><span class="p">:</span> <span class="s2">&quot;12345&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;item&quot;</span><span class="p">:</span> <span class="s2">&quot;cappuccino&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Food Preparation</strong>:
    - The Kitchen Service receives the &ldquo;OrderPlaced&rdquo; event and starts preparing the sandwich.
    - Once the sandwich is ready, it generates a &ldquo;FoodReady&rdquo; event:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;orderId&quot;</span><span class="p">:</span> <span class="s2">&quot;12345&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;item&quot;</span><span class="p">:</span> <span class="s2">&quot;sandwich&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Order Ready Notification</strong>:
    - The Counter Service receives both &ldquo;BeverageReady&rdquo; and &ldquo;FoodReady&rdquo; events.
    - Once all items for order 12345 are ready, it generates an &ldquo;OrderReady&rdquo; event and notifies the customer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;orderId&quot;</span><span class="p">:</span> <span class="s2">&quot;12345&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;ready&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Best-Practices-for-Implementing-Event-2d-Based-Architecture"></a>
<h2>Best Practices for Implementing Event-Based Architecture</h2>

<ul>
<li><strong>Design for Idempotency</strong>: Ensure that event consumers can handle duplicate events gracefully, as network issues
might cause events to be delivered multiple times.</li>
<li><strong>Use Schemas</strong>: Define clear schemas for events to ensure consistent and reliable communication between producers
and consumers.</li>
<li><strong>Monitor and Log</strong>: Implement robust monitoring and logging to track event flows, detect anomalies, and
troubleshoot issues.</li>
<li><strong>Handle Event Ordering</strong>: If event order is important, ensure that your event bus or stream processing framework
preserves the order of events.</li>
<li><strong>Ensure Fault Tolerance</strong>: Design your system to handle failures gracefully, with retry mechanisms and fallback
strategies.</li>
</ul>


<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Modern event-based architecture provides a robust and flexible approach to building scalable, resilient, and real-time systems. By decoupling components and enabling asynchronous communication through events, this architecture pattern addresses many challenges of traditional systems. Whether you&rsquo;re building an e-commerce platform, a real-time analytics system, or an IoT solution, event-based architecture can help you achieve better performance, scalability, and agility.</p>

<p>Embracing this architectural style requires careful planning, but the benefits it offers make it a worthwhile investment for any modern application.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Understanding the Bloom filter]]></title>
        <link href="https://rishijeet.github.io/blog/understanding-the-bloom-filter/"/>
        <updated>2024-06-11T10:09:01+05:30</updated>
        <id>https://rishijeet.github.io/blog/understanding-the-bloom-filter</id>
        <content type="html"><![CDATA[<p>A Bloom filter is a probabilistic data structure used to test whether an element is a member of a set. It is highly space-efficient and allows for fast query operations, but it has a small risk of false positives (reporting that an element is in the set when it is not) while guaranteeing no false negatives (an element that is in the set will always be reported as such).</p>

<a name="How-Bloom-Filters-Work"></a>
<h2>How Bloom Filters Work</h2>

<p>A Bloom filter uses a bit array of fixed size and a set of hash functions. Here is a simplified example of how it works:</p>

<p><strong>Initialization</strong>:</p>

<ul>
<li>Create a bit array of size \(m\) and initialize all bits to 0.</li>
</ul>


<p><strong>Adding an Element</strong>:</p>

<ul>
<li>Compute \(k\) hash values of the element using \(k\) different hash functions.</li>
<li>Set the bits at the positions determined by the hash values to 1 in the bit array.</li>
</ul>


<p><strong>Checking Membership</strong>:</p>

<ul>
<li>Compute the \(k\) hash values of the element.</li>
<li>Check the bits at the positions determined by the hash values.</li>
<li>If all bits are set to 1, the element is considered to be possibly in the set (with a risk of false positive).</li>
<li>If any bit is 0, the element is definitely not in the set.</li>
</ul>


<p>The underlying architecture of a Bloom filter consists of three main components: a bit array, a set of hash functions, and the operations for adding elements and checking membership. Below is a detailed breakdown of each component and the overall architecture:</p>

<a name="Components-of-a-Bloom-Filter"></a>
<h2>Components of a Bloom Filter</h2>

<p><strong>Bit Array</strong>:</p>

<ul>
<li>A Bloom filter uses a bit array of fixed size \( m \). This array is initialized with all bits set to 0.</li>
<li>The size of the bit array \( m \) is chosen based on the expected number of elements \( n \) and the desired
false positive rate \( p \).</li>
</ul>


<p><strong>Hash Functions</strong>:</p>

<ul>
<li>A Bloom filter uses \( k \) different hash functions. Each hash function maps an input element to one of the
positions in the bit array uniformly at random.</li>
<li>The number of hash functions \( k \) is optimized to minimize the false positive rate.</li>
</ul>


<!-- more -->


<a name="Operations"></a>
<h2>Operations</h2>

<p><strong>Adding an Element</strong>:</p>

<ul>
<li>To add an element to the Bloom filter, the element is passed through each of the \( k \) hash functions to
produce \( k \) hash values.</li>
<li>Each hash value corresponds to a position in the bit array. The bits at these positions are set to 1.</li>
<li>If a bit is already set to 1, it remains 1.</li>
</ul>


<p><strong>Checking Membership</strong>:</p>

<ul>
<li>To check if an element is in the Bloom filter, the element is passed through the \( k \) hash functions to
produce \( k \) hash values.</li>
<li>Each hash value corresponds to a position in the bit array. If all the bits at these positions are 1, the element is considered to be possibly in the set.</li>
<li>If any bit at these positions is 0, the element is definitely not in the set.</li>
</ul>


<a name="Architecture-Details"></a>
<h2>Architecture Details</h2>

<p>The architecture of a Bloom filter can be visualized as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                +---------------------+
</span><span class='line'>                |     Bit Array       |
</span><span class='line'>                | [0, 0, 0, ..., 0]   |
</span><span class='line'>                +---------|-----------+
</span><span class='line'>                          |
</span><span class='line'>                          v
</span><span class='line'>+-------------------+     v     +-------------------+
</span><span class='line'>| Hash Function 1   | ----------&gt; | Hash Function 2   | ... | Hash Function k |
</span><span class='line'>+-------------------+     |     +-------------------+
</span><span class='line'>       |                  |
</span><span class='line'>       v                  v
</span><span class='line'>+------+-------+   +------+-------+
</span><span class='line'>| Element to be |   | Element to be |
</span><span class='line'>|    added      |   |  checked     |
</span><span class='line'>+---------------+   +---------------+
</span><span class='line'>       |                  |
</span><span class='line'>       v                  v
</span><span class='line'>+-------------------+     +-------------------+
</span><span class='line'>| Calculate Hash    |     | Calculate Hash    |
</span><span class='line'>|  Positions        |     |  Positions        |
</span><span class='line'>+-------------------+     +-------------------+
</span><span class='line'>       |                  |
</span><span class='line'>       v                  v
</span><span class='line'>+-------------------+     +-------------------+
</span><span class='line'>| Set Bits in Bit   |     | Check Bits in Bit |
</span><span class='line'>| Array to 1        |     | Array             |
</span><span class='line'>+-------------------+     +-------------------+
</span><span class='line'>                          |
</span><span class='line'>                          v
</span><span class='line'>                      +-------------------+
</span><span class='line'>                      |   Check Result    |
</span><span class='line'>                      +-------------------+</span></code></pre></td></tr></table></div></figure>


<a name="Detailed-Process"></a>
<h2>Detailed Process</h2>

<p><strong>Initialization</strong>:</p>

<ul>
<li>The bit array of size \( m \) is initialized to all 0s.</li>
<li>The hash functions are chosen, ensuring they distribute hash values uniformly across the bit array.</li>
</ul>


<p><strong>Adding an Element</strong>:</p>

<ul>
<li>The element is processed through each hash function to get \( k \) positions.</li>
<li><div> Example: For an element &#92;( x &#92;) and hash functions &#92;( h_1, h_2, &#8230;, h_k &#92;) </div>


<ul>
<li><div>\( h_1(x) = p_1 \)</div>
</li>
<li><div>\( h_2(x) = p_2 \)</div>
</li>
<li><div>&#8230;</div>
</li>
<li><div>\( h_k(x) = p_k \)</div>
</li>
</ul>
</li>
<li><div> Set the bit positions \( p_1, p_2, &#8230;, p_k \) to 1 in the bit array. </div>
</li>
</ul>


<p><strong>Checking Membership</strong>:</p>

<ul>
<li>The element is processed through each hash function to get \( k \) positions.</li>
<li><div>Example: For an element &#92;( y &#92;) and hash functions \( h_1, h_2, &#8230;, h_k \):</div>


<ul>
<li><div> &#92;( h_1(y) = q_1 &#92;)</div>
</li>
<li><div>&#92;( h_2(y) = q_2 &#92;)</div>
</li>
<li><div>&#8230;</div>
</li>
<li><div>&#92;( h_k(y) = q_k &#92;)</div>
</li>
</ul>
</li>
<li><div>Check if all bit positions &#92;( q_1, q_2, &#8230;, q_k &#92;) are 1 in the bit array. </div>
</li>
<li>If all are 1, the element is possibly in the set; if any is 0, the element is definitely not in the set.</li>
</ul>


<a name="Mathematical-Foundation"></a>
<h2>Mathematical Foundation</h2>

<ul>
<li><p>The probability of a false positive can be estimated using the formula:
\[
p \approx \left(1 - e^{-\frac{kn}{m}}\right)<sup>k</sup>
\]
where \( k \) is the number of hash functions, \( n \) is the number of elements added, and \( m \) is the size of the bit array.</p></li>
<li><p>Optimal number of hash functions:
\[
k = \frac{m}{n} \ln 2
\]
This minimizes the false positive rate for given \( m \) and \( n \).</p></li>
</ul>


<a name="Example-in-Python"></a>
<h3>Example in Python</h3>

<p>Here’s a complete example of a Bloom filter in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">mmh3</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bitarray</span> <span class="kn">import</span> <span class="n">bitarray</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BloomFilter</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span> <span class="o">=</span> <span class="n">hash_count</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span> <span class="o">=</span> <span class="n">bitarray</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="o">.</span><span class="n">setall</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Example usage</span>
</span><span class='line'><span class="n">bf</span> <span class="o">=</span> <span class="n">BloomFilter</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add items</span>
</span><span class='line'><span class="n">bf</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;apple&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">bf</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;banana&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check for items</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">bf</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="s">&quot;apple&quot;</span><span class="p">))</span>  <span class="c"># Output: True</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">bf</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="s">&quot;banana&quot;</span><span class="p">))</span>  <span class="c"># Output: True</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">bf</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="s">&quot;grape&quot;</span><span class="p">))</span>  <span class="c"># Output: False</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Types-of-Bloom-Filters"></a>
<h2>Types of Bloom Filters</h2>

<p>Bloom filters have several variations and types that cater to different use cases and requirements. Here are some of the main types of Bloom filters:</p>

<p><strong>Standard Bloom Filter</strong>:</p>

<ul>
<li>The basic version as described previously, which uses a bit array and multiple hash functions to determine membership with a probabilistic guarantee.</li>
</ul>


<p><strong>Counting Bloom Filter</strong>:</p>

<ul>
<li>Extends the standard Bloom filter by using a counter array instead of a bit array.</li>
<li>Allows for deletion of elements by decrementing the counters.</li>
<li>Useful in scenarios where elements may be frequently added and removed.</li>
</ul>


<p><strong>Scalable Bloom Filter</strong>:</p>

<ul>
<li>Adjusts the size dynamically to accommodate an increasing number of elements while maintaining a low false positive rate.</li>
<li>Uses a series of Bloom filters with exponentially increasing sizes and decreasing false positive rates.</li>
</ul>


<p><strong>Partitioned Bloom Filter</strong>:</p>

<ul>
<li>The bit array is divided into partitions, with each partition associated with one hash function.</li>
<li>Reduces the chance of hash collisions and improves performance.</li>
</ul>


<p><strong>Compressed Bloom Filter</strong>:</p>

<ul>
<li>A Bloom filter that is compressed to save space, at the cost of slightly higher false positive rates and processing time.</li>
<li>Useful in scenarios with very tight space constraints.</li>
</ul>


<p><strong>Cuckoo Filter</strong>:</p>

<ul>
<li>Similar to a Bloom filter but uses cuckoo hashing, which allows for dynamic insertion and deletion with a guaranteed maximum number of hash collisions.</li>
<li>Provides better performance for insertion and deletion operations compared to counting Bloom filters.</li>
</ul>


<p><strong>d-left Counting Bloom Filter</strong>:</p>

<ul>
<li>A combination of d-left hashing and counting Bloom filters, providing efficient updates and low false positive rates.</li>
<li>Suitable for scenarios with high update rates.</li>
</ul>


<p><strong>Stable Bloom Filter</strong>:</p>

<ul>
<li>Designed to handle continuous data streams where only the most recent elements matter.</li>
<li>Uses a sliding window approach to keep the Bloom filter updated with the most recent elements.</li>
</ul>


<a name="Example-Implementations-in-Python"></a>
<h3>Example Implementations in Python</h3>

<p>Here are some Python implementations for a few types of Bloom filters:</p>

<a name="Standard-Bloom-Filter"></a>
<h4>Standard Bloom Filter</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">mmh3</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bitarray</span> <span class="kn">import</span> <span class="n">bitarray</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BloomFilter</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span> <span class="o">=</span> <span class="n">hash_count</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span> <span class="o">=</span> <span class="n">bitarray</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="o">.</span><span class="n">setall</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Counting-Bloom-Filter"></a>
<h4>Counting Bloom Filter</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">mmh3</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CountingBloomFilter</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span> <span class="o">=</span> <span class="n">hash_count</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">count_array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">size</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">count_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">count_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Scalable-Bloom-Filter"></a>
<h4>Scalable Bloom Filter</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mmh3</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bitarray</span> <span class="kn">import</span> <span class="n">bitarray</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ScalableBloomFilter</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">initial_size</span><span class="p">,</span> <span class="n">error_rate</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">filters</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">initial_size</span> <span class="o">=</span> <span class="n">initial_size</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">error_rate</span> <span class="o">=</span> <span class="n">error_rate</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_add_filter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_add_filter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="p">:</span>
</span><span class='line'>            <span class="n">size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">initial_size</span>
</span><span class='line'>            <span class="n">error_rate</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_rate</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">bit_array</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>            <span class="n">error_rate</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">error_rate</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">new_filter</span> <span class="o">=</span> <span class="n">BloomFilter</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="o">-</span><span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">error_rate</span><span class="p">)</span> <span class="o">/</span> <span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>        <span class="n">new_filter</span><span class="o">.</span><span class="n">error_rate</span> <span class="o">=</span> <span class="n">error_rate</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_filter</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">bit_array</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_add_filter</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">filters</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BloomFilter</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">hash_count</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span> <span class="o">=</span> <span class="n">bitarray</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="o">.</span><span class="n">setall</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hash_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">digest</span> <span class="o">=</span> <span class="n">mmh3</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">bit_array</span><span class="p">[</span><span class="n">digest</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Key-uses-of-Bloom-Filters"></a>
<h2>Key uses of Bloom Filters</h2>

<p><strong>Membership Testing</strong></p>

<ul>
<li><strong>Applications</strong>: Used in network and database systems to test if an element (e.g., an IP address, URL, or
database entry) is present in a large dataset.</li>
<li><strong>Example</strong>: In a web caching system, a Bloom filter can quickly determine if a requested URL is already cached,
thus avoiding the need to query the actual cache storage.</li>
</ul>


<p><strong>Preventing Redundant Data</strong></p>

<ul>
<li><strong>Applications</strong>: Helps in avoiding the storage or processing of duplicate elements.</li>
<li><strong>Example</strong>: In distributed databases or big data processing frameworks like Hadoop and Spark, Bloom filters can ensure that only unique records are processed or stored.</li>
</ul>


<p><strong>Distributed Systems</strong></p>

<ul>
<li><strong>Applications</strong>: Used to efficiently share set membership information across distributed nodes.</li>
<li><strong>Example</strong>: In a distributed hash table (DHT) like Cassandra, Bloom filters help quickly determine if a row exists in a particular node before attempting a read operation, thereby reducing unnecessary I/O operations.</li>
</ul>


<p><strong>Database Indexing</strong></p>

<ul>
<li><strong>Applications</strong>: Enhances the performance of database indexing mechanisms by quickly checking if a key is present.</li>
<li><strong>Example</strong>: In a database like Apache HBase, Bloom filters are used to reduce the number of disk lookups for non-existent rows.</li>
</ul>


<p><strong>Network Security</strong></p>

<ul>
<li><strong>Applications</strong>: Helps in quickly checking if a network packet matches a known malicious pattern.</li>
<li><strong>Example</strong>: In intrusion detection systems (IDS) and firewalls, Bloom filters can be used to check if incoming network traffic matches a list of known attack signatures.</li>
</ul>


<p><strong>Spell Checking</strong></p>

<ul>
<li><strong>Applications</strong>: Quickly verify if a word exists in a dictionary.</li>
<li><strong>Example</strong>: Spell checkers can use Bloom filters to rapidly determine if a word is valid, thus speeding up the spell-checking process.</li>
</ul>


<a name="Summary"></a>
<h2>Summary</h2>

<p>Bloom filters are versatile data structures with various types designed to optimize performance, space efficiency, and functionality for different use cases. Whether you need basic membership checking, dynamic size adjustment, element deletion, or handling continuous data streams, there&rsquo;s a Bloom filter variant that can meet your requirements.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Cassandra - Under the hood]]></title>
        <link href="https://rishijeet.github.io/blog/cassandra-under-the-hood/"/>
        <updated>2024-05-22T23:48:44+05:30</updated>
        <id>https://rishijeet.github.io/blog/cassandra-under-the-hood</id>
        <content type="html"><![CDATA[<p>Apache Cassandra is designed to handle large amounts of data across many commodity servers without any single point of failure. This architecture allows it to provide high availability and fault tolerance, making it an excellent choice for large-scale, mission-critical applications. Below, we&rsquo;ll delve into the key components and architecture of Cassandra.</p>

<a name="Key-Components"></a>
<h3>Key Components</h3>

<ul>
<li><strong>Nodes</strong>: Individual machines running Cassandra.</li>
<li><strong>Clusters</strong>: A collection of nodes that work together.</li>
<li><strong>Data Centers</strong>: Groupings of nodes within a cluster, typically corresponding to physical or logical locations.</li>
<li><strong>Keyspace</strong>: A namespace for tables, analogous to a database in SQL.</li>
<li><strong>Tables</strong>: Collections of rows, each row containing columns, similar to tables in an RDBMS.</li>
<li><strong>Commit Log</strong>: A log of all write operations, used for crash recovery.</li>
<li><strong>Memtable</strong>: An in-memory structure where data is first written.</li>
<li><strong>SSTable</strong>: Immutable on-disk storage files created from flushed Memtables.</li>
<li><strong>Bloom Filters</strong>: Probabilistic data structures that help determine whether an SSTable might contain a requested row.</li>
</ul>


<a name="Architecture-Overview"></a>
<h3>Architecture Overview</h3>

<a name="Cluster-Management"></a>
<h4>Cluster Management</h4>

<p>Cassandra&rsquo;s cluster architecture ensures high availability and fault tolerance. The cluster is a set of nodes, and data is distributed among these nodes using consistent hashing. Key features include:</p>

<ul>
<li><strong>Gossip Protocol</strong>: Nodes communicate with each other using a peer-to-peer gossip protocol to share state information.</li>
<li><strong>Snitches</strong>: Determine the relative distance between nodes to route requests efficiently.</li>
<li><strong>Replication</strong>: Data is replicated across multiple nodes. The replication strategy and factor determine how and where data is replicated.</li>
</ul>


<!--more-->


<a name="Data-Distribution"></a>
<h4>Data Distribution</h4>

<p>Cassandra uses a consistent hashing algorithm to distribute data across nodes. Key features include:</p>

<ul>
<li><strong>Partitioners</strong>: Determine the node placement of data based on the primary key.</li>
<li><strong>Token Ring</strong>: Each node in the cluster is assigned a range of tokens. Data is distributed based on these tokens.</li>
<li><strong>Replication Factor</strong>: The number of copies of data stored in the cluster.</li>
</ul>


<a name="Write-Path"></a>
<h4>Write Path</h4>

<p>The write path in Cassandra ensures durability and high availability:</p>

<ul>
<li><strong>Commit Log</strong>: Each write operation is recorded in the commit log for durability.</li>
<li><strong>Memtable</strong>: The data is written to an in-memory structure called the Memtable.</li>
<li><strong>SSTable</strong>: Once the Memtable is full, data is flushed to disk into an SSTable.</li>
<li><strong>Compaction</strong>: Over time, SSTables are compacted to merge and purge deleted data.</li>
</ul>


<a name="Read-Path"></a>
<h4>Read Path</h4>

<p>The read path in Cassandra is optimized for speed:</p>

<ul>
<li><strong>Read Request</strong>: A read request is routed to the appropriate nodes.</li>
<li><strong>Bloom Filter</strong>: Checks if the SSTable might contain the requested row.</li>
<li><strong>Key Cache</strong>: Quickly locates the row key in the SSTable.</li>
<li><strong>Row Cache</strong>: Caches the entire row to speed up frequent queries.</li>
<li><strong>Memtable and SSTable</strong>: Data is read from Memtables and SSTables, and results are merged.</li>
</ul>


<a name="Fault-Tolerance"></a>
<h4>Fault Tolerance</h4>

<p>Cassandra is designed to be highly fault-tolerant:</p>

<ul>
<li><strong>Data Replication</strong>: Multiple copies of data are stored across different nodes.</li>
<li><strong>Hinted Handoff</strong>: If a node is down, writes are stored temporarily on another node and delivered when the target node is available.</li>
<li><strong>Read Repair</strong>: During reads, inconsistencies are repaired by comparing data across replicas.</li>
<li><strong>Anti-Entropy Repair</strong>: Regularly scheduled repairs ensure all replicas are consistent.</li>
</ul>


<a name="Diagram"></a>
<h3>Diagram</h3>

<p>Here’s a simplified diagram of Cassandra’s architecture:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                    +-----------------------------+
</span><span class='line'>                    |         Cassandra Cluster   |
</span><span class='line'>                    +-----------------------------+
</span><span class='line'>                                  |
</span><span class='line'>  +-------------------------------+-------------------------------+
</span><span class='line'>  |                               |                               |
</span><span class='line'>+------------+                 +------------+                 +------------+
</span><span class='line'>| Data Center 1 |               | Data Center 2 |               | Data Center 3 |
</span><span class='line'>+------------+                 +------------+                 +------------+
</span><span class='line'>  |                               |                               |
</span><span class='line'>+------+--------+          +------+--------+          +------+--------+
</span><span class='line'>| Node 1       |          | Node 1       |          | Node 1       |
</span><span class='line'>+--------------+          +--------------+          +--------------+
</span><span class='line'>| Commit Log   |          | Commit Log   |          | Commit Log   |
</span><span class='line'>| Memtable     |          | Memtable     |          | Memtable     |
</span><span class='line'>| SSTable      |          | SSTable      |          | SSTable      |
</span><span class='line'>+--------------+          +--------------+          +--------------+</span></code></pre></td></tr></table></div></figure>


<p>To illustrate, let&rsquo;s consider setting up a Cassandra cluster and creating a keyspace</p>

<a name="Configuration"></a>
<h4>Configuration</h4>

<p><strong>cassandra.yaml</strong>: The primary configuration file for Cassandra.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">cluster_name</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCluster&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">num_tokens</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">256</span>
</span><span class='line'><span class="l-Scalar-Plain">seed_provider</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">class_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">org.apache.cassandra.locator.SimpleSeedProvider</span>
</span><span class='line'>    <span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">seeds</span><span class="p-Indicator">:</span> <span class="s">&quot;127.0.0.1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">storage_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">7000</span>
</span><span class='line'><span class="l-Scalar-Plain">listen_address</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">rpc_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">9042</span>
</span><span class='line'><span class="l-Scalar-Plain">rpc_address</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">endpoint_snitch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">SimpleSnitch</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Keyspace-and-Table-Creation"></a>
<h4>Keyspace and Table Creation</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Create a keyspace</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">KEYSPACE</span> <span class="n">mykeyspace</span> <span class="k">WITH</span> <span class="n">replication</span> <span class="o">=</span> <span class="err">{</span>
</span><span class='line'>  <span class="s1">&#39;class&#39;</span><span class="p">:</span> <span class="s1">&#39;SimpleStrategy&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;replication_factor&#39;</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'><span class="err">}</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Use the keyspace</span>
</span><span class='line'><span class="n">USE</span> <span class="n">mykeyspace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Create a table</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">users</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">user_id</span> <span class="n">UUID</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="n">name</span> <span class="nb">TEXT</span><span class="p">,</span>
</span><span class='line'>  <span class="n">email</span> <span class="nb">TEXT</span><span class="p">,</span>
</span><span class='line'>  <span class="n">age</span> <span class="nb">INT</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Why-is-Cassandra-fast-in-writes-3f-"></a>
<h2>Why is Cassandra fast in writes?</h2>

<a name="Log-2d-Structured-Storage"></a>
<h3>Log-Structured Storage</h3>

<ul>
<li>Cassandra appends write operations to a commit log on disk for durability.</li>
<li>This sequential write pattern minimizes disk seeks and maximizes disk throughput, leading to fast write operations.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Insert data into Cassandra using CQL (Cassandra Query Language)</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;INSERT INTO users (user_id, name, email, age) VALUES (uuid(), &#39;Alice&#39;, &#39;alice@example.com&#39;, 30)&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<a name="In-2d-Memory-Write-Path"></a>
<h3>In-Memory Write Path</h3>

<ul>
<li>Write operations are stored in an in-memory structure called the Memtable.</li>
<li>Memtables are flushed to disk periodically or when they reach a certain size threshold.</li>
<li>Buffering writes in memory before flushing them to disk speeds up write operations.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Insert data into Cassandra using CQL</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;INSERT INTO users (user_id, name, email, age) VALUES (uuid(), &#39;Alice&#39;, &#39;alice@example.com&#39;, 30)&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Multi-2d-Threaded-Architecture"></a>
<h3>Multi-Threaded Architecture</h3>

<ul>
<li>Cassandra&rsquo;s architecture allows for parallel processing of writes across multiple threads and cores.</li>
<li>Each node in the Cassandra cluster can handle multiple concurrent writes, maximizing hardware resources utilization.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Insert data into Cassandra using multiple threads</span>
</span><span class='line'><span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;INSERT INTO users (user_id, name, email, age) VALUES (uuid(), &#39;Alice&#39;, &#39;alice@example.com&#39;, 30)&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Distributed-Writes"></a>
<h3>Distributed Writes</h3>

<ul>
<li>Cassandra distributes data across multiple nodes using consistent hashing.</li>
<li>Write operations are replicated to multiple nodes based on the configured replication factor.</li>
<li>This distributed nature allows Cassandra to scale horizontally, handling write-heavy workloads with ease.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Insert data into Cassandra with replication factor</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;INSERT INTO users (user_id, name, email, age) VALUES (uuid(), &#39;Alice&#39;, &#39;alice@example.com&#39;, 30)&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">setConsistencyLevel</span><span class="o">(</span><span class="n">DefaultConsistencyLevel</span><span class="o">.</span><span class="na">ALL</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Tunable-Consistency"></a>
<h3>Tunable Consistency</h3>

<ul>
<li>Cassandra allows for tunable consistency levels for write operations.</li>
<li>Clients can choose the level of consistency required for each write operation, balancing consistency and latency.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Insert data into Cassandra with tunable consistency level</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;INSERT INTO users (user_id, name, email, age) VALUES (uuid(), &#39;Alice&#39;, &#39;alice@example.com&#39;, 30)&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">setConsistencyLevel</span><span class="o">(</span><span class="n">DefaultConsistencyLevel</span><span class="o">.</span><span class="na">QUORUM</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<a name="No-Single-Point-of-Bottleneck"></a>
<h3>No Single Point of Bottleneck</h3>

<ul>
<li>Cassandra&rsquo;s decentralized architecture ensures no single point of bottleneck for writes.</li>
<li>Each node in the cluster can independently process write operations, leading to linear scalability.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Insert data into Cassandra on multiple nodes in the cluster</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;INSERT INTO users (user_id, name, email, age) VALUES (uuid(), &#39;Alice&#39;, &#39;alice@example.com&#39;, 30)&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">setConsistencyLevel</span><span class="o">(</span><span class="n">DefaultConsistencyLevel</span><span class="o">.</span><span class="na">LOCAL_QUORUM</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Conclusion"></a>
<h3>Conclusion</h3>

<p>Cassandra&rsquo;s fast write performance is achieved through a combination of log-structured storage, in-memory write buffering, multi-threaded architecture, distributed writes, tunable consistency, and decentralized design. By leveraging these design principles and using appropriate configuration options, Cassandra can handle high-throughput write workloads efficiently, making it an ideal choice for applications that require fast ingestion of large volumes of data.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Advantages of Enable Checkpointing in Apache Flink]]></title>
        <link href="https://rishijeet.github.io/blog/advantages-of-enable-checkpointing-in-apache-flink/"/>
        <updated>2024-05-19T21:32:50+05:30</updated>
        <id>https://rishijeet.github.io/blog/advantages-of-enable-checkpointing-in-apache-flink</id>
        <content type="html"><![CDATA[<p>Enabling checkpointing in Apache Flink provides significant advantages for ensuring the reliability, consistency, and fault-tolerance of stream processing applications. Below, I detail the benefits and provide a code example.</p>

<a name="Advantages-of-Checkpointing"></a>
<h2>Advantages of Checkpointing</h2>

<ul>
<li><p><strong>Fault Tolerance</strong> Checkpointing ensures that the state of your Flink application can be recovered in case of a failure. Flink periodically saves snapshots of the entire distributed data stream and state to a persistent storage. If a failure occurs, Flink can restart the application and restore the state from the latest checkpoint, minimizing data loss and downtime.</p></li>
<li><p><strong>Exactly-Once Processing Semantics</strong> With checkpointing, Flink guarantees exactly-once processing semantics. This means that each event in the stream is processed exactly once, even in the face of failures. This is crucial for applications where accuracy is paramount, such as financial transaction processing or data analytics.</p></li>
<li><p><strong>Consistent State Management</strong> Checkpointing provides consistent snapshots of the application state. This consistency ensures that all parts of the state are in sync and correspond to the same point in the input stream, avoiding issues like partial updates or inconsistent results.</p></li>
<li><p><strong>Efficient State Recovery</strong> Checkpointing allows efficient recovery of the application state. Instead of reprocessing the entire data stream from the beginning, Flink can resume processing from the last checkpoint, saving computational resources and reducing recovery time.</p></li>
<li><p><strong>Backpressure Handling</strong> Flink’s checkpointing mechanism can help manage backpressure in the system by ensuring that the system processes data at a rate that matches the checkpointing intervals, preventing data overloads.</p></li>
<li><p><strong>State Evolution</strong> Checkpointing supports state evolution, allowing updates to the state schema without losing data. This is useful for applications that need to update their state representation over time while maintaining historical consistency.</p></li>
</ul>


<!--more-->


<a name="Code-Example"></a>
<h2>Code Example</h2>

<p>Here’s a basic example of enabling checkpointing in a Flink job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.api.common.restartstrategy.RestartStrategies</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.environment.CheckpointConfig</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.environment.StreamExecutionEnvironment</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.CheckpointingMode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CheckpointingExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">StreamExecutionEnvironment</span> <span class="n">env</span> <span class="o">=</span> <span class="n">StreamExecutionEnvironment</span><span class="o">.</span><span class="na">getExecutionEnvironment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Enable checkpointing every 10 seconds</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">enableCheckpointing</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span> <span class="c1">// 10 seconds</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set checkpointing mode to exactly-once (default)</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">getCheckpointConfig</span><span class="o">().</span><span class="na">setCheckpointingMode</span><span class="o">(</span><span class="n">CheckpointingMode</span><span class="o">.</span><span class="na">EXACTLY_ONCE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Ensure 500 ms of progress happen between checkpoints</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">getCheckpointConfig</span><span class="o">().</span><span class="na">setMinPauseBetweenCheckpoints</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Checkpoints have to complete within one minute, or are discarded</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">getCheckpointConfig</span><span class="o">().</span><span class="na">setCheckpointTimeout</span><span class="o">(</span><span class="mi">60000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Allow only one checkpoint to be in progress at the same time</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">getCheckpointConfig</span><span class="o">().</span><span class="na">setMaxConcurrentCheckpoints</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Retain the checkpoints on cancellation</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">getCheckpointConfig</span><span class="o">().</span><span class="na">enableExternalizedCheckpoints</span><span class="o">(</span><span class="n">CheckpointConfig</span><span class="o">.</span><span class="na">ExternalizedCheckpointCleanup</span><span class="o">.</span><span class="na">RETAIN_ON_CANCELLATION</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set a restart strategy</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">setRestartStrategy</span><span class="o">(</span><span class="n">RestartStrategies</span><span class="o">.</span><span class="na">fixedDelayRestart</span><span class="o">(</span>
</span><span class='line'>            <span class="mi">3</span><span class="o">,</span> <span class="c1">// number of restart attempts</span>
</span><span class='line'>            <span class="mi">10000</span> <span class="c1">// delay between attempts</span>
</span><span class='line'>        <span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Define your data source, transformations, and sinks</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;Flink Checkpointing Example&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By setting up checkpointing, you ensure your Flink application is resilient and can recover from failures efficiently, maintaining data integrity and consistency.</p>

<p>For more detailed information, you can refer to the <a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/dev/datastream/fault-tolerance/checkpointing/">Apache Flink Documentation on Checkpointing</a>.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Understanding Windowing in Apache Flink]]></title>
        <link href="https://rishijeet.github.io/blog/understanding-windowing-in-apache-flink/"/>
        <updated>2024-05-19T20:57:38+05:30</updated>
        <id>https://rishijeet.github.io/blog/understanding-windowing-in-apache-flink</id>
        <content type="html"><![CDATA[<p>Windowing is a fundamental concept in stream processing that allows you to group a continuous stream of events into finite chunks for processing. Apache Flink provides powerful windowing capabilities that support various window types and triggers for flexible, real-time data analysis.</p>

<p><img src="https://rishijeet.github.io/images/windows.svg" height="300" width="900" alt="Alt text" /><em>Source: Apache Flink</em></p>

<a name="Types-of-Windows-in-Flink"></a>
<h2>Types of Windows in Flink</h2>

<a name="Tumbling-Windows"></a>
<h3>Tumbling Windows</h3>

<p>Tumbling windows are fixed-size, non-overlapping windows. Each event belongs to exactly one window.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// your event stream</span>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">windowedStream</span> <span class="o">=</span> <span class="n">stream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">TumblingEventTimeWindows</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">10</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">WindowFunction</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">,</span> <span class="n">WindowedEvent</span><span class="o">,</span> <span class="n">Key</span><span class="o">,</span> <span class="n">TimeWindow</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">TimeWindow</span> <span class="n">window</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Window processing logic</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Sliding-Windows"></a>
<h3>Sliding Windows</h3>

<p>Sliding windows are also fixed-size but can overlap. Each event can belong to multiple windows depending on the slide interval.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">windowedStream</span> <span class="o">=</span> <span class="n">stream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">SlidingEventTimeWindows</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">10</span><span class="o">),</span> <span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">5</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">WindowFunction</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">,</span> <span class="n">WindowedEvent</span><span class="o">,</span> <span class="n">Key</span><span class="o">,</span> <span class="n">TimeWindow</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">TimeWindow</span> <span class="n">window</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Window processing logic</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<a name="Session-Windows"></a>
<h3>Session Windows</h3>

<p>Session windows group events that arrive close to each other, with a session gap defining the threshold for grouping.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">windowedStream</span> <span class="o">=</span> <span class="n">stream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">ProcessingTimeSessionWindows</span><span class="o">.</span><span class="na">withGap</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">minutes</span><span class="o">(</span><span class="mi">5</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">WindowFunction</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">,</span> <span class="n">WindowedEvent</span><span class="o">,</span> <span class="n">Key</span><span class="o">,</span> <span class="n">TimeWindow</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">TimeWindow</span> <span class="n">window</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Window processing logic</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Global-Windows"></a>
<h3>Global Windows</h3>

<p>Global windows group all elements with the same key into a single window. These windows require custom triggers to define when to produce results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">windowedStream</span> <span class="o">=</span> <span class="n">stream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">GlobalWindows</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">trigger</span><span class="o">(</span><span class="n">CountTrigger</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">100</span><span class="o">))</span> <span class="c1">// Triggering every 100 events</span>
</span><span class='line'>    <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">WindowFunction</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">,</span> <span class="n">WindowedEvent</span><span class="o">,</span> <span class="n">Key</span><span class="o">,</span> <span class="n">TimeWindow</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">TimeWindow</span> <span class="n">window</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Window processing logic</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Assigning-Timestamps-and-Generating-Watermarks"></a>
<h2>Assigning Timestamps and Generating Watermarks</h2>

<p>For event-time windowing, it&rsquo;s crucial to assign timestamps to events and generate watermarks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'><span class="n">WatermarkStrategy</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">watermarkStrategy</span> <span class="o">=</span> <span class="n">WatermarkStrategy</span>
</span><span class='line'>    <span class="o">.&lt;</span><span class="n">Event</span><span class="o">&gt;</span><span class="n">forBoundedOutOfOrderness</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">withTimestampAssigner</span><span class="o">(</span><span class="k">new</span> <span class="n">SerializableTimestampAssigner</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">extractTimestamp</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">,</span> <span class="kt">long</span> <span class="n">recordTimestamp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">event</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">timestampedStream</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">assignTimestampsAndWatermarks</span><span class="o">(</span><span class="n">watermarkStrategy</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Example:-Tumbling-Window-with-Event-Time"></a>
<h2>Example: Tumbling Window with Event Time</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.api.common.eventtime.SerializableTimestampAssigner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.api.common.eventtime.WatermarkStrategy</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.datastream.DataStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.environment.StreamExecutionEnvironment</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.windowing.time.Time</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.windowing.windows.TimeWindow</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.util.Collector</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TumblingWindowExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">StreamExecutionEnvironment</span> <span class="n">env</span> <span class="o">=</span> <span class="n">StreamExecutionEnvironment</span><span class="o">.</span><span class="na">getExecutionEnvironment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="na">addSource</span><span class="o">(</span><span class="k">new</span> <span class="nf">EventSource</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WatermarkStrategy</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">watermarkStrategy</span> <span class="o">=</span> <span class="n">WatermarkStrategy</span>
</span><span class='line'>            <span class="o">.&lt;</span><span class="n">Event</span><span class="o">&gt;</span><span class="n">forBoundedOutOfOrderness</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withTimestampAssigner</span><span class="o">(</span><span class="k">new</span> <span class="n">SerializableTimestampAssigner</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">long</span> <span class="nf">extractTimestamp</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">,</span> <span class="kt">long</span> <span class="n">recordTimestamp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">event</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">timestampedStream</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">assignTimestampsAndWatermarks</span><span class="o">(</span><span class="n">watermarkStrategy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">timestampedStream</span>
</span><span class='line'>            <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">TumblingEventTimeWindows</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">10</span><span class="o">)))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">WindowFunction</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">,</span> <span class="n">WindowedEvent</span><span class="o">,</span> <span class="n">String</span><span class="o">,</span> <span class="n">TimeWindow</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">TimeWindow</span> <span class="n">window</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">WindowedEvent</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Window processing logic</span>
</span><span class='line'>                    <span class="n">out</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="k">new</span> <span class="nf">WindowedEvent</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">window</span><span class="o">,</span> <span class="n">input</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">})</span>
</span><span class='line'>            <span class="o">.</span><span class="na">print</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;Tumbling Window Example&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Benefits-of-Windowing"></a>
<h2>Benefits of Windowing</h2>

<p><strong>Temporal Aggregation</strong>: Windows allow you to perform aggregations and computations over specific time intervals, essential for real-time analytics and monitoring.</p>

<p><strong>Handling Out-of-Order Events</strong>: With proper windowing and watermarking, Flink can handle out-of-order events and ensure accurate results.</p>

<p><strong>Scalability</strong>: Windowed operations can be distributed and parallelized, making it feasible to process large-scale data streams efficiently.</p>

<p><strong>Flexibility</strong>: Flink&rsquo;s windowing system is highly flexible, supporting various window types and custom triggers, catering to a wide range of use cases.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Windowing in Apache Flink is a versatile and powerful feature that enables the processing of continuous data streams in meaningful chunks. By utilizing different types of windows and configuring them appropriately, you can implement robust real-time data processing pipelines that handle time-based computations effectively.</p>

<p>For more detailed information, you can refer to the <a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/dev/datastream/operators/windows/">Apache Flink Documentation on Windowing</a> and <a href="https://rishijeet.github.io/blog/understanding-event-time-in-apache-flink">Understanding Event Time in Apache Flink</a></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Understanding Watermarks in Apache Flink]]></title>
        <link href="https://rishijeet.github.io/blog/understanding-watermarks-in-apache-flink/"/>
        <updated>2024-05-19T20:35:48+05:30</updated>
        <id>https://rishijeet.github.io/blog/understanding-watermarks-in-apache-flink</id>
        <content type="html"><![CDATA[<a name="What-are-Watermarks-3f-"></a>
<h2>What are Watermarks?</h2>

<p>Watermarks in Apache Flink are a mechanism to handle event time and out-of-order events in stream processing. They represent a point in time in the data stream and indicate that no events with timestamps earlier than the watermark should be expected. Essentially, watermarks help Flink understand the progress of event time in the stream and trigger computations like window operations based on this understanding.</p>

<ul>
<li><strong>Event Time</strong> Event Time is the time at which events actually occurred, as recorded in the event data itself. For more detailed information, you can refer to the <a href="https://rishijeet.github.io/blog/understanding-event-time-in-apache-flink">Understanding Event Time in Apache Flink</a></li>
<li><strong>Ingestion Time</strong> Ingestion Time is the time when events enter the Flink pipeline.</li>
<li><strong>Processing Time</strong> Processing Time is the time when events are processed by Flink.</li>
</ul>


<a name="Watermarks"></a>
<h3>Watermarks</h3>

<ul>
<li><strong>Definition</strong>: A watermark is a timestamp that flows as part of the data stream and denotes the progress of event time.</li>
<li><strong>Purpose</strong>: Watermarks help in handling late events and triggering event-time-based operations like windowing.</li>
</ul>


<p><img src="https://rishijeet.github.io/images/stream_watermark_in_order.svg" height="300" width="900" alt="Alt text" /><em>Source: Apache Flink</em></p>

<p><img src="https://rishijeet.github.io/images/stream_watermark_out_of_order.svg" height="300" width="900" alt="Alt text" /><em>Source: Apache Flink</em></p>

<!--more-->


<a name="Generating-Watermarks"></a>
<h2>Generating Watermarks</h2>

<p>Watermarks can be generated in two main ways:</p>

<p><strong>Punctuated Watermarks</strong>: These are emitted at specific points in the stream, often when certain events are encountered.</p>

<p><strong>Periodic Watermarks</strong>: These are emitted at regular intervals.</p>

<a name="Example-of-Watermark-Generation"></a>
<h3>Example of Watermark Generation</h3>

<p>Here’s a code example demonstrating how to assign timestamps and generate watermarks using periodic watermarks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.api.common.eventtime.SerializableTimestampAssigner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.api.common.eventtime.WatermarkGenerator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.api.common.eventtime.WatermarkStrategy</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.datastream.DataStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.environment.StreamExecutionEnvironment</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.functions.source.SourceFunction</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.streaming.api.watermark.Watermark</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WatermarkExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">StreamExecutionEnvironment</span> <span class="n">env</span> <span class="o">=</span> <span class="n">StreamExecutionEnvironment</span><span class="o">.</span><span class="na">getExecutionEnvironment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="na">addSource</span><span class="o">(</span><span class="k">new</span> <span class="nf">EventSource</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WatermarkStrategy</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">watermarkStrategy</span> <span class="o">=</span> <span class="n">WatermarkStrategy</span>
</span><span class='line'>            <span class="o">.&lt;</span><span class="n">Event</span><span class="o">&gt;</span><span class="n">forBoundedOutOfOrderness</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withTimestampAssigner</span><span class="o">(</span><span class="k">new</span> <span class="n">SerializableTimestampAssigner</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">long</span> <span class="nf">extractTimestamp</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">,</span> <span class="kt">long</span> <span class="n">recordTimestamp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">event</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">watermarkedStream</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">assignTimestampsAndWatermarks</span><span class="o">(</span><span class="n">watermarkStrategy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">watermarkedStream</span>
</span><span class='line'>            <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">TumblingEventTimeWindows</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">10</span><span class="o">)))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="k">new</span> <span class="nf">EventTimeWindowFunction</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">print</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;Watermark Example&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Example-Source-Function"></a>
<h3>Example Source Function</h3>

<p>Here’s a simple source function generating events with timestamps:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventSource</span> <span class="kd">implements</span> <span class="n">SourceFunction</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">SourceContext</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>            <span class="n">ctx</span><span class="o">.</span><span class="na">collectWithTimestamp</span><span class="o">(</span><span class="k">new</span> <span class="nf">Event</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">),</span> <span class="n">timestamp</span><span class="o">);</span>
</span><span class='line'>            <span class="n">ctx</span><span class="o">.</span><span class="na">emitWatermark</span><span class="o">(</span><span class="k">new</span> <span class="nf">Watermark</span><span class="o">(</span><span class="n">timestamp</span> <span class="o">-</span> <span class="mi">5000</span><span class="o">));</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">running</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Handling-Parallel-Streams"></a>
<h2>Handling Parallel Streams</h2>

<p>In a distributed environment, Flink processes streams in parallel. Each parallel sub-task can emit its own watermarks. Flink uses the minimum watermark of all parallel sub-tasks to ensure that no events are missed.</p>

<p><img src="https://rishijeet.github.io/images/parallel_streams_watermarks.svg" height="300" width="900" alt="Alt text" /><em>Source: Apache Flink</em></p>

<a name="Example-of-Parallel-Watermark-Handling"></a>
<h3>Example of Parallel Watermark Handling</h3>

<p>When using parallel streams, each sub-task generates its watermarks, and Flink computes the minimum watermark across all sub-tasks. This is crucial to correctly handle late events and ensure accurate window computations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="na">addSource</span><span class="o">(</span><span class="k">new</span> <span class="nf">ParallelEventSource</span><span class="o">()).</span><span class="na">setParallelism</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">WatermarkStrategy</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">watermarkStrategy</span> <span class="o">=</span> <span class="n">WatermarkStrategy</span>
</span><span class='line'>    <span class="o">.&lt;</span><span class="n">Event</span><span class="o">&gt;</span><span class="n">forBoundedOutOfOrderness</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">withTimestampAssigner</span><span class="o">(</span><span class="k">new</span> <span class="n">SerializableTimestampAssigner</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">extractTimestamp</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">,</span> <span class="kt">long</span> <span class="n">recordTimestamp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">event</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">watermarkedStream</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">assignTimestampsAndWatermarks</span><span class="o">(</span><span class="n">watermarkStrategy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">watermarkedStream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">TumblingEventTimeWindows</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">10</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="k">new</span> <span class="nf">EventTimeWindowFunction</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">print</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Watermark-Strategy-for-Parallel-Sources"></a>
<h3>Watermark Strategy for Parallel Sources</h3>

<p>Here&rsquo;s an example of a parallel source function generating events and watermarks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ParallelEventSource</span> <span class="kd">extends</span> <span class="n">RichParallelSourceFunction</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">SourceContext</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&gt;</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>            <span class="n">ctx</span><span class="o">.</span><span class="na">collectWithTimestamp</span><span class="o">(</span><span class="k">new</span> <span class="nf">Event</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">),</span> <span class="n">timestamp</span><span class="o">);</span>
</span><span class='line'>            <span class="n">ctx</span><span class="o">.</span><span class="na">emitWatermark</span><span class="o">(</span><span class="k">new</span> <span class="nf">Watermark</span><span class="o">(</span><span class="n">timestamp</span> <span class="o">-</span> <span class="mi">5000</span><span class="o">));</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">running</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Benefits-of-Watermarks"></a>
<h2>Benefits of Watermarks</h2>

<p> <strong>Handling Late Data</strong>: Watermarks allow the system to process late events and include them in the correct windows, ensuring completeness and accuracy.</p>

<p><strong>Event Time Processing</strong>: With watermarks, Flink can process events based on their actual occurrence time, making it suitable for applications where timing is critical.</p>

<p><strong>Out-of-Order Event Handling</strong>: Watermarks enable Flink to handle out-of-order events gracefully by providing a tolerance for lateness.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Watermarks are a critical component in Apache Flink for dealing with event time and out-of-order data. By generating and using watermarks, Flink can accurately perform time-based computations like windowing and aggregations, even in the presence of late-arriving events. This makes Flink a powerful tool for real-time stream processing applications.</p>

<p>For more detailed information, you can refer to the <a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/dev/datastream/event_time/">Apache Flink Documentation on Watermarks</a> and <a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/time/">Event Time</a>.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Understanding Event Time in Apache Flink]]></title>
        <link href="https://rishijeet.github.io/blog/understanding-event-time-in-apache-flink/"/>
        <updated>2024-05-19T20:22:47+05:30</updated>
        <id>https://rishijeet.github.io/blog/understanding-event-time-in-apache-flink</id>
        <content type="html"><![CDATA[<a name="What-is-Event-Time-3f-"></a>
<h3>What is Event Time?</h3>

<p>Event Time is one of the three time semantics in Apache Flink, along with Ingestion Time and Processing Time. Event Time refers to the time at which each individual event actually occurred, typically extracted from the event itself. This contrasts with Processing Time, which refers to the time at which events are processed by the Flink system, and Ingestion Time, which is the time at which events enter the Flink pipeline.</p>

<p><img src="https://rishijeet.github.io/images/event_processing_time.svg" height="300" width="900" alt="Alt text" /><em>Source: Apache Flink</em></p>

<a name="Key-Features-of-Event-Time:"></a>
<h3>Key Features of Event Time:</h3>

<p><strong>Timestamp Extraction</strong>: In Event Time, each event must have a timestamp that indicates when the event occurred. This timestamp is extracted from the event data itself.</p>

<p><strong>Watermarks</strong>: Watermarks are a mechanism used to track progress in Event Time. They are special timestamps that indicate that no events with a timestamp older than the watermark should be expected. Watermarks allow Flink to handle late-arriving data and trigger computations when it is safe to assume all relevant data has been processed. For more detailed information, you can refer to the <a href="https://rishijeet.github.io/blog/understanding-watermarks-in-apache-flink">Understanding Watermarks in Apache Flink</a></p>

<p><strong>Windowing</strong>: Event Time is crucial for windowed operations. Windows (e.g., tumbling, sliding, session windows) in Flink can be defined based on Event Time, ensuring that events are grouped according to when they actually occurred.</p>

<!-- more -->


<a name="Benefits-of-Using-Event-Time"></a>
<h2>Benefits of Using Event Time</h2>

<p><strong>Accuracy in Time-Based Operations</strong>:</p>

<ul>
<li> Using Event Time allows for more accurate and reliable time-based operations, such as windowed aggregations, joins, and pattern detections. This is because the operations are based on the actual occurrence time of events, rather than the time they are processed.</li>
</ul>


<p><strong>Handling Out-of-Order Events</strong>:</p>

<ul>
<li> Real-world data streams often have events that arrive out of order. With Event Time and watermarks, Flink can manage out-of-order events effectively. Watermarks help to delay processing just enough to account for late events without significant delays, ensuring completeness and correctness in the results.</li>
</ul>


<p><strong>Consistency Across Distributed Systems</strong>:</p>

<ul>
<li> In distributed systems, processing time can vary significantly across different nodes due to network latency, load balancing, and other factors. Event Time provides a consistent temporal reference across all nodes, ensuring that operations like windowing produce consistent results regardless of where or when events are processed.</li>
</ul>


<p><strong>Improved Late Data Handling</strong>:</p>

<ul>
<li> By leveraging watermarks, Flink can handle late-arriving data more gracefully. You can define how much lateness to tolerate and what actions to take for late data, allowing for flexible and robust processing pipelines that can deal with real-world stream data issues.</li>
</ul>


<a name="Extracting-Timestamps-and-Generating-Watermarks"></a>
<h3>Extracting Timestamps and Generating Watermarks</h3>

<p>To use Event Time in Flink, you typically need to:</p>

<p><strong>Assign Timestamps</strong>: Extract the event timestamps from the incoming data.</p>

<p><strong>Generate Watermarks</strong>: Define a strategy for generating watermarks that dictate the event-time progress.</p>

<p>Here’s an example in Java:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">MyEvent</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="na">addSource</span><span class="o">(</span><span class="k">new</span> <span class="nf">MyEventSource</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">assignTimestampsAndWatermarks</span><span class="o">(</span><span class="k">new</span> <span class="n">AssignerWithPunctuatedWatermarks</span><span class="o">&lt;</span><span class="n">MyEvent</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">extractTimestamp</span><span class="o">(</span><span class="n">MyEvent</span> <span class="n">element</span><span class="o">,</span> <span class="kt">long</span> <span class="n">previousElementTimestamp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">element</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">();</span> <span class="c1">// Extract timestamp from event</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Watermark</span> <span class="nf">checkAndGetNextWatermark</span><span class="o">(</span><span class="n">MyEvent</span> <span class="n">lastElement</span><span class="o">,</span> <span class="kt">long</span> <span class="n">extractedTimestamp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Watermark</span><span class="o">(</span><span class="n">extractedTimestamp</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// Generate watermark</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>    <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">TumblingEventTimeWindows</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">10</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">WindowFunction</span><span class="o">&lt;</span><span class="n">MyEvent</span><span class="o">,</span> <span class="n">ResultType</span><span class="o">,</span> <span class="n">KeyType</span><span class="o">,</span> <span class="n">TimeWindow</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">KeyType</span> <span class="n">key</span><span class="o">,</span> <span class="n">TimeWindow</span> <span class="n">window</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">MyEvent</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">ResultType</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Process windowed events</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Using-Event-Time-Windows"></a>
<h3>Using Event Time Windows</h3>

<p>Flink supports various types of windows based on Event Time:</p>

<ul>
<li><strong>Tumbling Windows</strong>: Fixed-size, non-overlapping windows.</li>
<li><strong>Sliding Windows</strong>: Fixed-size windows that can overlap.</li>
<li><strong>Session Windows</strong>: Variable-sized windows that group events based on session gaps.</li>
</ul>


<p>Example of a tumbling window in Event Time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">MyEvent</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// Your event stream</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">keyBy</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">event</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">window</span><span class="o">(</span><span class="n">TumblingEventTimeWindows</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Time</span><span class="o">.</span><span class="na">seconds</span><span class="o">(</span><span class="mi">10</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">);</span> <span class="c1">// Aggregation function</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Event Time in Apache Flink is essential for accurately processing and analyzing time-based event streams. By utilizing timestamps extracted from the events and managing time progress through watermarks, Flink ensures precise and consistent stream processing even in the presence of out-of-order and late-arriving events. This makes Event Time invaluable for real-world applications where timing accuracy is critical.</p>

<p>For more detailed information, you can refer to the <a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/time/">Apache Flink Documentation on Event Time</a>.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Using Broadcast State Pattern in Flink for Fraud Detection]]></title>
        <link href="https://rishijeet.github.io/blog/using-broadcast-state-pattern-in-flink-for-fraud-detection/"/>
        <updated>2024-05-19T19:47:48+05:30</updated>
        <id>https://rishijeet.github.io/blog/using-broadcast-state-pattern-in-flink-for-fraud-detection</id>
        <content type="html"><![CDATA[<p>The Broadcast State Pattern in Apache Flink is a powerful feature for real-time stream processing, particularly useful for scenarios like fraud detection. This pattern allows you to maintain a shared state that can be updated and accessed by multiple parallel instances of a stream processing operator. Here&rsquo;s how it can be applied to fraud detection:</p>

<a name="Key-Concepts-of-the-Broadcast-State-Pattern"></a>
<h2>Key Concepts of the Broadcast State Pattern</h2>

<p><strong>Broadcast State</strong>: This is a state that is shared across all parallel instances of an operator. It is used to store information that needs to be accessible to all instances, such as configuration data or rules for fraud detection.</p>

<p><strong>Regular (Non-Broadcast) Streams</strong>: These streams carry the main data that needs to be processed, such as transaction events.</p>

<p><strong>Broadcast Streams</strong>: These streams carry the state updates, such as new fraud detection rules or updates to existing rules.</p>

<a name="Steps-to-Implement-Fraud-Detection-Using-Broadcast-State-Pattern"></a>
<h2>Steps to Implement Fraud Detection Using Broadcast State Pattern</h2>

<p><strong>Define the Broadcast State</strong>:</p>

<ul>
<li> Define the data structure that will hold the fraud detection rules.</li>
<li> For example, a map where the key is a rule identifier and the value is the rule details.</li>
</ul>


<p><strong>Create the Broadcast Stream</strong>:</p>

<ul>
<li> This stream will carry the updates to the fraud detection rules.</li>
<li> Use <code>BroadcastStream</code> to broadcast this stream to all parallel instances of the operator that processes the transactions.</li>
</ul>


<!-- more -->


<p><strong>Process the Broadcast State</strong>:</p>

<ul>
<li> Implement a <code>BroadcastProcessFunction</code> that handles both the main transaction stream and the broadcast rule updates.</li>
<li> In the <code>processBroadcastElement</code> method, update the broadcast state with new or modified rules.</li>
<li> In the <code>processElement</code> method, access the broadcast state to apply the current fraud detection rules to each transaction.</li>
</ul>


<p><strong>Apply Fraud Detection Logic</strong>:</p>

<ul>
<li> As each transaction event arrives, use the current set of fraud detection rules stored in the broadcast state to determine if the transaction is potentially fraudulent.</li>
</ul>


<a name="Example-Implementation"></a>
<h2>Example Implementation</h2>

<p>Here&rsquo;s a simplified example (I have used Java as an example but works with other programming languages too ) of how you might implement this in Flink:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Define a data structure for fraud detection rules</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">FraudDetectionRule</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">ruleId</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">ruleDetails</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// Other relevant fields and methods</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the main transaction stream</span>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">Transaction</span><span class="o">&gt;</span> <span class="n">transactionStream</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="na">addSource</span><span class="o">(</span><span class="k">new</span> <span class="nf">TransactionSource</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the broadcast stream for fraud detection rules</span>
</span><span class='line'><span class="n">DataStream</span><span class="o">&lt;</span><span class="n">FraudDetectionRule</span><span class="o">&gt;</span> <span class="n">ruleStream</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="na">addSource</span><span class="o">(</span><span class="k">new</span> <span class="nf">RuleSource</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Define the broadcast state descriptor</span>
</span><span class='line'><span class="n">MapStateDescriptor</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">FraudDetectionRule</span><span class="o">&gt;</span> <span class="n">ruleStateDescriptor</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">MapStateDescriptor</span><span class="o">&lt;&gt;(</span><span class="s">&quot;FraudRules&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">FraudDetectionRule</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Broadcast the rule stream</span>
</span><span class='line'><span class="n">BroadcastStream</span><span class="o">&lt;</span><span class="n">FraudDetectionRule</span><span class="o">&gt;</span> <span class="n">broadcastRuleStream</span> <span class="o">=</span> <span class="n">ruleStream</span><span class="o">.</span><span class="na">broadcast</span><span class="o">(</span><span class="n">ruleStateDescriptor</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Process the streams with a BroadcastProcessFunction</span>
</span><span class='line'><span class="n">transactionStream</span>
</span><span class='line'>    <span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">broadcastRuleStream</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="k">new</span> <span class="n">BroadcastProcessFunction</span><span class="o">&lt;</span><span class="n">Transaction</span><span class="o">,</span> <span class="n">FraudDetectionRule</span><span class="o">,</span> <span class="n">Alert</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">MapState</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">FraudDetectionRule</span><span class="o">&gt;</span> <span class="n">rulesState</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">open</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">parameters</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">rulesState</span> <span class="o">=</span> <span class="n">getRuntimeContext</span><span class="o">().</span><span class="na">getMapState</span><span class="o">(</span><span class="n">ruleStateDescriptor</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processElement</span><span class="o">(</span><span class="n">Transaction</span> <span class="n">transaction</span><span class="o">,</span> <span class="n">ReadOnlyContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">Alert</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Apply the current fraud detection rules</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">FraudDetectionRule</span> <span class="n">rule</span> <span class="o">:</span> <span class="n">rulesState</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">applyRule</span><span class="o">(</span><span class="n">transaction</span><span class="o">,</span> <span class="n">rule</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">out</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="k">new</span> <span class="nf">Alert</span><span class="o">(</span><span class="n">transaction</span><span class="o">,</span> <span class="n">rule</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processBroadcastElement</span><span class="o">(</span><span class="n">FraudDetectionRule</span> <span class="n">rule</span><span class="o">,</span> <span class="n">Context</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">Alert</span><span class="o">&gt;</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Update the broadcast state with new or modified rules</span>
</span><span class='line'>            <span class="n">rulesState</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">rule</span><span class="o">.</span><span class="na">ruleId</span><span class="o">,</span> <span class="n">rule</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">applyRule</span><span class="o">(</span><span class="n">Transaction</span> <span class="n">transaction</span><span class="o">,</span> <span class="n">FraudDetectionRule</span> <span class="n">rule</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Implement rule logic here</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Example placeholder</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<a name="Benefits-of-Using-Broadcast-State-Pattern"></a>
<h2>Benefits of Using Broadcast State Pattern</h2>

<p> <strong>Consistency:</strong>Ensures all instances have a consistent view of the rules.</p>

<p> <strong>Scalability:</strong> Can handle high-throughput streams by distributing the workload across multiple parallel instances.</p>

<p><strong>Flexibility:</strong> Rules can be dynamically updated without stopping the stream processing.</p>

<p>By leveraging the Broadcast State Pattern, you can efficiently manage and apply real-time fraud detection rules across your entire data stream, ensuring timely and accurate detection of fraudulent activities.</p>
]]></content>
    </entry>
    
</feed>
